/*
 * File: app/view/project/PanelViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.project.PanelViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.projectpanel',

    requires: [
        'Ext.data.BufferedStore',
        'Ext.util.Sorter',
        'Ext.app.bind.Formula'
    ],

    data: {
        record: false,
        isOrderSelected: false,
        isPoAllowed:true
    },
    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                stores: {
                    projects: {
                        type: 'buffered',
                        pageSize: 200,
                        autoLoad: false,
                        model: 'Erp.model.Project',
                        listeners: {
                            load: 'onBufferedStoreLoad',
                            beforeload:{
                                fn:'onProjectsStoreBeforeLoad',
                                scope:'controller'
                            }
                        }
                    },
                    keyaccounts: me.processKeyaccounts({
                        fields: [
                            {
                                type: 'int',
                                name: 'id'
                            },
                            {
                                type: 'string',
                                name: 'name'
                            }
                        ]
                    }),
                    sourceLanguages:new Ext.data.Store({
                        data: Erp.data.sourceLanguages
                    }),
                    targetLanguages:new Ext.data.Store({
                        data: Erp.data.targetLanguages
                    })
                }
            };
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },
    
    formulas: {
        baseCurrency: function(get) {
            return Erp.data.app.baseCurrency;
        },
        isNewRecord:function(get){
        	if(!get('record')){
        		return true;
        	}
        	return get('record').get('name')!='';
        }
    },
    processKeyaccounts: function(config) {
        config.data = Ext.Array.clone(Erp.data.customers.keyaccounts);
        config.data.unshift({id: null, name: '- Kein Keyaccount -'});
        return config;
    }
});