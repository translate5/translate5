/*
 * File: app/view/project/Panel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.project.Panel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.projectpanel',

    requires: [
        'Erp.view.project.PanelViewModel',
        'Erp.view.project.PanelViewController',
        'Erp.view.comment.Column',
        'Erp.view.project.Form',
        'Erp.view.comment.Panel',
        'Ext.grid.Panel',
        'Ext.grid.column.Number',
        'Ext.grid.filters.filter.String',
        'Ext.grid.column.Date',
        'Ext.grid.filters.filter.Date',
        'Ext.grid.filters.filter.List',
        'Ext.grid.filters.filter.Number',
        'Ext.grid.column.Boolean',
        'Ext.grid.filters.filter.Boolean',
        'Ext.selection.RowModel',
        'Ext.grid.filters.Filters',
        'Ext.view.Table',
        'Ext.XTemplate',
        'Ext.form.Panel',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Separator',
        'Ext.button.Cycle',
        'Ext.menu.Menu',
        'Ext.menu.CheckItem',
        'Erp.view.Moneycolumn',
        'Erp.view.Margecolumn'
    ],
    controller: 'projectpanel',
    itemId:'projectpanel',
    viewModel: {
        type: 'projectpanel'
    },
    cls: 'sumpanel',
    shrinkWrap: 0,
    layout: 'border',
    collapsed: false,
    title: 'My Panel',
    defaultListenerScope: true,
    listeners: {
        render:{
            fn:'onProjectPanelRender',
            scope:'controller'
        }
    },

    initConfig: function(instanceConfig) {
        var me = this,
            sumpanel = {
                xtype: 'panel',
                dock: 'top',
                frame: true,
                height: 40,
                loader: {
                    url: 'erp/order/sum',
                    loadMask: true,
                    renderer: 'data',
                    listeners:{
                        beforeload:me.onSumLoaderBeforeLoad
                    }
                },
                tpl:new Ext.XTemplate('<tpl for=".">',
                                        '<table class="fixedsumtable"> ',
                                            '<col width="100px" />',
                                            '<col width="100px" />',
                                            '<col width="100px" />',
                                            '<col width="5px" />',
                                            '<col width="100px" />',
                                            '<col width="120px" />',
                                            '<col width="100px" />',
                                            '<col width="100px" />',
                                            '<col width="120px" />',
                                            '<col width="5px" />',
                                            '<col width="100px" />',
                                            '<col width="80px" />',
                                             '<tr> ',
                                                '<td>&nbsp;&nbsp; &sum; &nbsp;&nbsp; <b>Angebotswert </b></td> ',
                                                '<td align="right"><b>{[this.currencyType(values.rows.offerNetValue)]}</b></td> ',
                                                '<td align="right">(+ USt. {[this.currencyType(values.rows.offerTaxValue)]} </td> ',
                                                '<td> = </td> ',
                                                '<td align="right">{[this.currencyType(values.rows.offerGrossValue)]}</td> ',
                                                '<td align="right"> | Marge  <b>{[this.numberType(values.rows.offerMargin)]}</b> %)</td> ',
                                                '<td>&nbsp;&nbsp; &sum; &nbsp;&nbsp; <b>Rechnungsbetrag Netto </b></td> ',
                                                '<td align="right"><b>{[this.currencyType(values.rows.billNetValue)]}</b></td> ',
                                                '<td align="right"> (+ USt.{[this.currencyType(values.rows.billTaxValue)]} </td> ',
                                                '<td> = </td> ',
                                                '<td align="right">{[this.currencyType(values.rows.billGrossValue)]}</td> ',
                                                '<td align="right"> | Marge <b>{[this.numberType(values.rows.billMargin)]}</b> %)</td> ',
                                            '</tr> ',
                                        '</table>',
                                       '</tpl>',{
                                       currencyType:function(val){
                                           return Erp.Utils.currency(val,'');
                                       },
                                       numberType:function(val){
                                           return Erp.Utils.negativeNumber(val);
                                       }
                                       }),
                ui: 'default-framed'
            },
            config = {
                items: [
                    {
                        xtype: 'gridpanel',
                        itemId:'projectGrid',
                        region: 'center',
                        split: true,
                        resizable: false,
                        scrollable: true,
                        title: '',
                        columns: [
                            {
                                xtype: 'numbercolumn',
                                width: 80,
                                dataIndex: 'id',
                                text: 'Auftragsnr.',
                                tooltip: 'Auftragsnummer',
                                format: '0',
                                align:'right',
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'numbercolumn',
                                width: 95,
                                dataIndex: 'debitNumber',
                                text: 'Rechn.-Nr. Deb.',
                                tooltip: 'Rechnungsnummer Debitoren',
                                format: '00',
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'datecolumn',
                                width: 90,
                                dataIndex: 'offerDate',
                                text: 'Angebotsdatum',
                                tooltip:'Angebotsdatum',
                                filter: {
                                    type: 'date'
                                }
                            },
                            {
                                xtype: 'datecolumn',
                                width: 100,
                                dataIndex: 'billDate',
                                text: 'Rechn.-Dat. Deb.',
                                tooltip: 'Rechnungsdatum Debitoren',
                                filter: {
                                    type: 'date'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                hidden: true,
                                width: 80,
                                dataIndex: 'keyAccount',
                                text: 'Key Account',
                                tooltip: 'Key Account',
                                filter: me.processMyListFilter({
                                    type: 'list',
                                    labelField: 'name',
                                    idField:'name'
                                })
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 100,
                                dataIndex: 'customerName',
                                text: 'Kunde',
                                tooltip: 'Kunde',
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 65,
                                dataIndex: 'customerNumber',
                                text: 'Kundennr.',
                                tooltip: 'Kundennummer',
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 90,
                                dataIndex: 'customerOrder',
                                text: 'Bestellnr. Kunde',
                                tooltip: 'Bestellnummer Kunde',
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 120,
                                dataIndex: 'pmName',
                                text: 'PM',
                                tooltip:'PM Name',
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                minWidth: 100,
                                dataIndex: 'name',
                                text: 'Auftragsname',
                                tooltip: 'Auftragsname',
                                flex: 1,
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'moneycolumn',
                                width: 90,
                                dataIndex: 'offerNetValue',
                                text: '€ Angebotswert',
                                tooltip: 'Angebotswert',
                                align:'right', 
                                filter: {
                                    type: 'number'
                                }
                            },
                            {
                                xtype: 'moneycolumn',
                                width: 90,
                                dataIndex: 'billNetValue',
                                text: '€ Rechn. netto',
                                tooltip: 'Rechnungsbetrag netto',
                                align:'right',
                                filter: {
                                    type: 'number'
                                }
                            },
                            {
                                xtype: 'moneycolumn',
                                width: 60,
                                dataIndex: 'billTaxValue',
                                text: '€ USt',
                                tooltip: 'USt',
                                align:'right',
                                filter: {
                                    type: 'number'
                                }
                            },
                            {
                                xtype: 'moneycolumn',
                                width: 90,
                                dataIndex: 'billGrossValue',
                                text: '€ Rechn. brutto',
                                tooltip: 'Rechnungsbetrag brutto',
                                align:'right',
                                filter: {
                                    type: 'number'
                                }
                            },
                            {
                                xtype: 'margecolumn',
                                width: 100,
                                dataIndex: 'offerMargin',
                                text: '% Angebotsmarge',
                                tooltip: 'Angebotsmarge in %',
                                align:'right',
                                filter: {
                                    type: 'number'
                                }
                            },
                            {
                                xtype: 'margecolumn',
                                width: 90,
                                dataIndex: 'billMargin',
                                text: '% Endg. Marge',
                                tooltip: 'Endgültige Marge in %',
                                align:'right',
                                filter: {
                                    type: 'number'
                                }
                            },
                            {
                                xtype: 'datecolumn',
                                width: 100,
                                dataIndex: 'paidDate',
                                text: 'Rechn. bez. Deb.',
                                tooltip: 'Datum Rechnung bezahlt Debitoren',
                                filter: {
                                    type: 'date'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                    if(Erp.data.project.stateLabels[value]) {
                                        return Erp.data.project.stateLabels[value];
                                    }
                                    return value;
                                },
                                width: 80,
                                dataIndex: 'state',
                                text: 'Status',
                                tooltip: 'Status',
                                filter: me.initStateFilterOptions({
                                    type: 'list'
                                })
                            },{
                                xtype: 'gridcolumn',
                                width: 80,
                                dataIndex: 'poCount',
                                text: 'POs',
                                tooltip: 'POs',
                                format: '00',
                                align:'right',
                                filter: {
                                    type: 'number'
                                },
                                listeners:{
                                    afterrender:function(gridcolumn){
                                        Ext.tip.QuickTipManager.register({
                                            target:gridcolumn.getEl(),
                                            text:'POs',
                                            dismissDelay: 0
                                        });
                                    }
                                },
                                renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                    if(record.get('poInfo')){
                                        metaData.tdAttr = "data-qtip='"+me.addPosTooltip(record.get('poInfo'))+"'";
                                    }
                                    return value>0 ? value : "";
                                }
                            },
                            {
                                xtype: 'datecolumn',
                                width: 80,
                                dataIndex: 'releaseDate',
                                text: 'Freigabedat.',
                                tooltip: 'Freigabedatum',
                                filter: {
                                    type: 'date'
                                }
                            },
                            {
                                xtype: 'datecolumn',
                                width: 80,
                                dataIndex: 'performanceDate',
                                text: 'Leistungsdatum',
                                tooltip: 'Leistungsdatum',
                                filter: {
                                    type: 'date'
                                }
                            },
                            {
                                xtype: 'datecolumn',
                                width: 80,
                                dataIndex: 'plannedDeliveryDate',
                                text: 'Gepl. Lieferdatum',
                                tooltip: 'Geplantes Lieferdatum',
                                filter: {
                                    type: 'date'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                    var months = Ext.Date.monthNames,
                                        month = (value >= 0 ? value : -1);
                                    return months[month] || '';
                                },
                                width: 80,
                                dataIndex: 'conversionMonth',
                                text: 'Umsatzmonat',
                                tooltip: 'Umsatzmonat',
                                filter: me.processConversionMonthFilter({
                                    type: 'list'
                                })
                            },
                            {
                                xtype: 'datecolumn',
                                width: 70,
                                dataIndex: 'conversionYear',
                                text: 'Umsatzjahr',
                                tooltip: 'Umsatzjahr',
                                format: 'Y',
                                filter: {
                                    type: 'number'
                                }
                            },
                            {
                                xtype: 'booleancolumn',
                                width: 60,
                                dataIndex: 'checked',
                                text: 'Geprüft',
                                tooltip: 'Geprüft',
                                falseText: '&#160;',
                                trueText: 'Ja',
                                filter: {
                                    type: 'boolean'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 100,
                                dataIndex: 'checkerName',
                                text: 'Geprüft von',
                                tooltip: 'Geprüft von',
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'commentcolumn',
                                tooltip:'Kommentare',
                                variableRowHeight: true,
                                minWidth: 100,
                                flex: 1
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 100,
                                dataIndex: 'editorName',
                                text: 'letzter Bearbeiter',
                                tooltip: 'letzter Bearbeiter',
                                filter: {
                                    type: 'string'
                                }
                            },
                            {
                                xtype: 'datecolumn',
                                width: 100,
                                dataIndex: 'modifiedDate',
                                text: 'letzte Bearbeitung',
                                tooltip: 'Datum letzte Bearbeitung',
                                filter: {
                                    type: 'date'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                minWidth: 100,
                                dataIndex: 'sourceLang',
                                renderer: function(value,metaData){
                                    var lang = me.getViewModel().getStore('sourceLanguages').findRecord('value',value,0,false,true,true), 
                                        label;
                                    if(lang){
                                        label = lang.get('value');
                                        metaData.tdAttr = 'data-qtip="' + lang.get('text') + '"';
                                        return label;
                                    }
                                    return '';
                                },
                                text: 'Quellsprache',
                                tooltip: 'Quellsprache',
                                flex: 1,
                                filter: {
                                    type: 'list',
                                    idField:'value',
                                    labelField:'value',
                                    options:Erp.Utils.arrayAlphabeticalSort(Erp.data.sourceLanguages),
                                    phpMode: false
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                minWidth: 100,
                                dataIndex: 'targetLang',
                                renderer: function(value,metaData){
                                    var values=value.split(',');
                                    if(values.length < 1){
                                        return '';
                                    }
                                    var langstore=me.getViewModel().getStore('targetLanguages'),
                                        lang,
                                        label='',
                                        fullLang="";
                                    values.forEach(function(v) {
                                        lang = langstore.findRecord('value',v,0,false,true,true);
                                        if(lang){
                                            label+=','+lang.get('value');
                                            fullLang+=lang.get('text')+'</br>';
                                        }
                                    }, this);
                                    metaData.tdAttr = 'data-qtip="' +fullLang+ '"';
                                    return (label!='' && label!=',')?label.substr(1):'';
                                },
                                text: 'Zielsprachen',
                                tooltip: 'Zielsprachen',
                                flex: 1,
                                filter: {
                                    type: 'list',
                                    idField:'value',
                                    labelField:'value',
                                    options: Erp.Utils.arrayAlphabeticalSort(Erp.data.targetLanguages),
                                    phpMode: false
                                }
                            }
                        ],
                        listeners: {
                            itemdblclick: {
                                fn: 'dblclick',
                                scope: 'controller'
                            },
                            beforeitemdblclick: {
                                fn: 'onBeforeProjectDblClick',
                                scope: 'controller'
                            }
                        },
                        selModel: {
                            pruneRemoved: false,
                            mode:'MULTI',
                            listeners: {
                                selectionchange: {
                                    fn: 'onRowModelSelectionChange',
                                    scope: 'controller'
                                }
                            }
                        },
                        plugins: [
                            {
                                ptype: 'gridfilters'
                            }
                        ],
                        viewConfig: {
                            listeners: {
                                beforerefresh: 'onViewBeforeRefresh'
                            }
                        },
                        dockedItems:me.addDockeditems(sumpanel)
                    },
                    {
                        xtype: 'panel',
                        itemId:'projectPanelEastRegion',
                        region: 'east',
                        split: true,
                        resizable: true,
                        reference: 'display',
                        hidden: true,
                        layout: {
                            type: 'accordion',      
                            animate: true,
                            multi: true,
                        },
                        bodyBorder: true,
                        width:'90%',
                        items: [{
                            xtype: 'projectForm'
                            },{
                                xtype: 'commentpanel',
                                collapsed: true,
                                parentConfig: {
                                    type: 'order',
                                    key: 'orderId'
                                },
                                controller: {
                                    type: 'commentpanel',
                                    id: 'ordercommentpanel'
                                }
                            }
                        ]
                    }
                ],
                dockedItems: [
                    {
                        xtype: 'toolbar',
                        itemId:'offerGridMenuToolbar',
                        dock: 'top',
                        items: [
                            {
                                xtype: 'button',
                                iconCls: 'icon-order-add',
                                text: 'Neuer Eintrag',
                                listeners: {
                                    click: {
                                        fn: 'onProjectAddClick',
                                        scope: 'controller'
                                    }
                                }
                            },
                            {
                                xtype: 'tbseparator',
                                bind:{
                                	hidden:'{!isPoAllowed}'
                                }
                            },
                            {
                                xtype: 'button',
                                iconCls: 'icon-po-add',
                                text: 'PO erstellen',
                                bind: {
                                    disabled: '{!isOrderSelected}',
                                    hidden:'{!isPoAllowed}'
                                },
                                listeners: {
                                    click: {
                                        fn: 'onPoAddClick',
                                        scope: 'controller'
                                    }
                                }
                            },
                            {
                                xtype: 'tbseparator'
                            },
                            {
                                xtype: 'button',
                                iconCls: 'icon-excel',
                                text: 'Excel Export',
                                listeners: {
                                    click: {
                                        fn: 'exportXls',
                                        scope: 'controller'
                                    }
                                }
                            },
                            {
                                xtype: 'tbseparator'
                            },
                            {
                                xtype: 'button',
                                iconCls: 'icon-refresh',
                                text: 'Aktualisieren',
                                listeners: {
                                    click: {
                                        fn: 'onButtonClick',
                                        scope: 'controller'
                                    }
                                }
                            },
                            {
                                xtype: 'tbseparator'
                            },
                            {
                                xtype: 'button',
                                text: 'Sortierung / Filterung zurücksetzen',
                                listeners: {
                                    click: {
                                        fn: 'clearFilterAndSort',
                                        scope: 'controller'
                                    }
                                }
                            },
                            {
                                xtype: 'tbseparator'
                            },
                            {
                                xtype: 'cycle',
                                setViewType: function(type) {
                                    var me=this,
                                        item = me.query('#'+type+'-view-btn');
                                    if(item.length > 0) {
                                        me.suspendEvent('change');
                                        me.setActiveItem(item[0]);
                                        me.resumeEvent('change');
                                    }
                                },
                                reference: 'viewtypebtn',
                                showText: true,
                                menu:{
                                    xtype: 'menu',
                                    width: 120,
                                    items: me.getViewItems()
                                },
                                listeners: {
                                    change: {
                                        fn: 'onCycleChange',
                                        scope: 'controller'
                                    }
                                }
                            }
                        ]
                    }
                ]
            };
        
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        
        return me.callParent([config]);
    },
    
    initActiveForm:function(){
    	var me=this,
    		defaultViews=["offer","project","bill"],
    		views=Erp.data.viewslist,
    		currentViewType=me.getController().getViewType(),
    		activeForm=null,
    		forms=Ext.ComponentQuery.query('projectForm');

    	//hide the forms, before the visible one is calculated
    	for(var i=0;i<forms.length;i++){
    		forms[i].setHidden(true);
    	}
    	
    	if(Ext.Array.contains(views,currentViewType)){
    		activeForm=Ext.ComponentQuery.query('#'+currentViewType+'Form');
    		activeForm=activeForm.length>0 ? activeForm[0] : null;
    	}
    	
    	//no form is found, collect the default one
    	if(!activeForm && Ext.Array.contains(defaultViews,currentViewType)){
    		activeForm=me.down('#projectForm');
    	}
    	
    	if(activeForm){
    		activeForm.setHidden(false);
    	}
    	
    	//set the viewcontroller active form instance
    	me.getController().activeForm=activeForm;
    	
    },
    
    getViewItems:function(){
        var items=[],
            aclViews=Erp.data.viewslist,
            viewListLabels=Erp.data.viewslistLabels;
        
        for(var i=0;i<aclViews.length;i++){
            var item={
                    xtype: 'menucheckitem',
                    itemId: aclViews[i]+'-view-btn',
                    text: viewListLabels[aclViews[i]],
                    focusable: true
            };
            
            items.push(item);
        }
        return items;
    },

    initStateFilterOptions: function(config) {
        config.options = [];
        Ext.Object.each(Erp.data.project.stateLabels, function(key, item) {
            config.options.push({id: key, text: item});
        });
        return config;
    },
    
    processConversionMonthFilter: function(config) {
        config.options = [];
        Ext.Object.each(Ext.Date.monthNames, function(key, item) {
            config.options.push({id: key, text: item});
        });
        return config;
    },

    onViewBeforeRefresh: function(dataview, eOpts) {
        //workaround / fix for TMUE-11
        dataview.getSelectionModel().deselectAll();
    },

    onBufferedStoreLoad: function(store) {
    	Ext.ComponentQuery.query('myviewport')[0].getViewModel().set('totalRows',store.totalCount)
		//this seems to be a bug, the store handler calls the callback in the panel instead in the controller,
        //so we have to bypass the call to the controller:
        var c = this.getController();
        c.onBufferedStoreLoad.apply(c, arguments);
    },

    onProjectsStoreBeforeLoad:function(){
        //this seems to be a bug, the store handler calls the callback in the panel instead in the controller,
        //so we have to bypass the call to the controller:
        var c = this.getController();
        c.onProjectsStoreBeforeLoad.apply(c, arguments);
    },

    /***
     * On sum loader before load event handler.
     * Merge to the current loader params the customerview type parametar(so the loader loads the data from the right table).
     */
    onSumLoaderBeforeLoad:function(loader,options,eOpts){
        var me=Ext.ComponentQuery.query('#projectpanel')[0];
        if(!options['params']){
            options['params']={};
        }
        var merged = Ext.merge({}, options['params'], {
            customerview:me.getController().getViewType()
        });
        options['params']=merged;
    },

    XXXinitComponent: function() {
        var me = this;
        me.callParent(arguments);
        Ext.defer(function(){
            
            //this will enable the store to be loaded when onFilterEndUpdate is called,it is disabled on store configuration
            me.getController().getViewStore().suppressNextFilter = false;
            
            me.getController().setViewType(Erp.data.viewslist[0]);
        },500);
    },

    processMyListFilter: function(config) {
        config.options = Erp.data.customers.keyaccounts;
        return config;
    },
    cancleForms:function(){
        var me=this,
            controller =me.getController();
        controller.cancelAll();
    },
    addDockeditems:function(inputConfig){
       var obj = [];
       obj.push(Ext.Object.merge(Ext.clone(inputConfig), {
           reference: "sumpanel",
           padding:'10 0 0 10'// (top, right, bottom, left).
       }));
       obj.push(Ext.Object.merge(Ext.clone(inputConfig), {
           reference: "sumpanelselected",
           padding:'0 0 0 10'// (top, right, bottom, left).
       }));
       return obj;
    },
    addPosTooltip:function(poinfo){
        var htmlholder=[
            innerHTML=''
        ],
        tpl = new Ext.XTemplate(
            '<table><thead><tr><th>PO number</th><th>Vendor name</th><th>PO-Wert</th><th>Status</th></tr></thead><tbody>',
            '<tpl for=".">',
                '<tr>',
                    '<td> {number}</td>',
                    '<td> {vendorName}</td>',
                    '<td class="tooltipNumberTableCell">{[this.currencyType(values.netValue)]}</td>',
                    '<td> {state}</td>',
                '</tr>',
            '</tpl>',
            '</tbody></table>',{
                currencyType:function(val){
                    return Erp.Utils.currency(val,'');
                },
            }
        );
        tpl.overwrite(htmlholder, poinfo);
        return htmlholder.innerHTML;
    }
});