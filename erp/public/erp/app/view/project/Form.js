/*
 * File: app/view/project/Form.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.project.Form', {
    extend: 'Ext.form.Panel',
    alias: 'widget.projectForm',

    requires: [
        'Erp.view.project.FormViewModel',
        'Erp.view.project.FormViewController',
        'Ext.form.FieldSet',
        'Ext.form.field.Display',
        'Ext.form.field.Date',
        'Ext.form.field.Number',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Hidden',
        'Ext.form.field.Checkbox',
        'Ext.button.Button',
        'Ext.menu.Menu',
        'Ext.menu.Item',
        'Erp.view.Numberfieldcustom'
    ],

    controller: 'projectForm',
    viewModel: {
        type: 'projectForm'
    },
    itemId:'projectForm',
    scrollable: true,
    bodyPadding: 10,
    title: 'Projektdaten',
    fieldDefaults: {
        anchor: '100%'
    },
    trackResetOnLoad: true,
    defaultButton: 'saveButton',
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    cls:'x-selectable',//selectable display fields
    defaultFormFildConfig:[],//default configuration for the form fields
    dockedItems: [
        {
            xtype: 'container',
            dock: 'bottom',
            padding: 10,
            layout: {
                type: 'hbox',
                align: 'middle',
                pack: 'center'
            },
            items: [
                {
                    xtype: 'button',
                    flex: 1,
                    formBind: true,
                    itemId: 'saveButton',
                    reference: 'saveButton',
                    margin: 5,
                    text: 'Speichern',
                },
                {
                    xtype: 'button',
                    flex: 1,
                    itemId: 'cancelButton',
                    margin: 5,
                    text: 'Abbrechen'
                }
            ]
        }
    ],
    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'container',
                        layout: {
                            type: 'hbox',
                            align: 'stretch'
                        },
                        items: [
                            {
                                xtype: 'fieldset',
                                flex: 1,
                                title: 'Auftragsdaten',
                                itemId:'orderFieldset',
                                items: [
                                    {
                                        xtype: 'displayfield',
                                        renderer: function(value, displayField) {
                                            if(! Ext.isNumeric(value)) {
                                                return '';
                                            }
                                            return value;
                                        },
                                        fieldLabel: 'Auftragsnr.',
                                        name: 'id'
                                    },
                                    {
                                        xtype: 'displayfield',
                                        renderer: function(value, displayField) {
                                            if(! Ext.isNumeric(value)) {
                                                return '';
                                            }
                                            return value;
                                        },
                                        width: 180,
                                        fieldLabel: 'Rechn.-Nr. Debitoren',
                                        name: 'debitNumber'
                                    },
                                    {
                                        xtype: 'textfield',
                                        fieldLabel: 'Auftragsname',
                                        name: 'name',
                                        stateId:'name',
                                        allowBlank: false
                                    },
                                    {
                                        xtype:'combo',
                                        fieldLabel:'Quellsprache',
                                        name:'sourceLang',
                                        store:new Ext.data.Store({
                                            data: Erp.data.sourceLanguages,
                                        }),
                                        displayField:'text',
                                        valueField:'value',
                                        emptyText:'-- Bitte auswählen --',
                                        submitEmptyText:false,
                                        allowBlank: false,
                                        typeAhead: true,
                                        minChars:1,
                                        queryMode:'local',
                                        onFocusLeave:function(e){
                                            var me=this,
                                                val =me.getValue(),
                                                selected =me.findRecordByValue(val);
                                            if(val!=null && val!="" && !selected){
                                                me.setValue(null);
                                            }
                                        },
                                        bind: {
                                            readOnly: '{!isOfferedStatus}'
                                        },
                                    },
                                    {
                                        xtype:'tagfield',
                                        name: 'targetLang',
                                        fieldLabel: 'Zielsprachen',
                                        readOnlyCls: 'x-form-readonly x-item-disabled',
                                        allowBlank: false,
                                        queryMode: 'local',
                                        blankText: "Dieses Feld darf nicht leer sein",
                                        bind: {
                                            disabled: '{isReleaseDate}'
                                        },
                                        displayField: 'text',
                                        valueField: 'value',
                                        store: new Ext.data.Store({
                                            data: Erp.data.targetLanguages,
                                        })
                                    },
                                    {
                                        xtype: 'datefield',
                                        enableKeyEvents:true,
                                        fieldLabel: 'Angebotsdatum',
                                        name: 'offerDate',
                                        allowBlank: false
                                    },
                                    {
                                        xtype: 'numberfieldcustom',
                                        fieldLabel: 'Angebotsmarge',
                                        name: 'offerMargin',
                                        cls:'numberfieldcustom numberfieldcustomtextalign',
                                        allowBlank: false
                                    },
                                    {
                                        xtype: 'numberfield',
                                        mouseWheelEnabled:false,
                                        fieldLabel: 'Angebotswert €',
                                        name: 'offerNetValue',
                                        validator:function (value) {
                                            Erp.Utils.checkNegativeNumber(this,value);
                                            if((parseFloat(value) <0 || parseFloat(value) > 0)) {
                                                return true;
                                            }
                                            return "Angebotswert muss größer oder kleiner als 0 sein.";
                                        },
                                        allowExponential: false,
                                        cls:'numberfieldcustom numberfieldcustomtextalign',
                                        step: 10
                                    },
                                    {
                                        xtype: 'datefield',
                                        fieldLabel: 'Freigabedatum',
                                        name: 'releaseDate',
                                        enableKeyEvents:true,
                                        readOnlyCls: 'x-form-readonly x-item-disabled',
                                        bind: {
                                            readOnly: '{stateresult.isBilled}'
                                        },
                                        listeners: {
                                            change: 'onReleaseDateChange'
                                        }
                                    },
                                    {
                                        xtype: 'datefield',
                                        fieldLabel: 'Gepl. Lieferdatum',
                                        name: 'plannedDeliveryDate',
                                        enableKeyEvents:true,
                                        readOnlyCls: 'x-form-readonly x-item-disabled',
                                        bind: {
                                            readOnly: '{stateresult.isBilled}'
                                        }
                                    }
                                ]
                            },
                            {
                                xtype: 'fieldset',
                                flex: 1,
                                title: 'Kunde',
                                itemId:'customerFieldset',
                                items: [
                                    {
                                        xtype: 'combobox',
                                        fieldLabel: 'Kunde',
                                        name: 'customerId',
                                        allowBlank: false,
                                        displayField: 'name',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        valueField: 'id',
                                        bind: {
                                            store: '{customers}'
                                        },
                                        listeners: {
                                            change: 'onCustomerChange'
                                        }
                                    },
                                    {
                                        xtype: 'displayfield',
                                        fieldLabel: 'Kundennummer',
                                        name: 'customerNumber'
                                    },
                                    {
                                        xtype: 'displayfield',
                                        renderer: function(value, displayField) {
                                            if(!value){
                                                return '';
                                            }
                                            var i = 0, keyaccounts = Erp.data.customers.keyaccounts;
                                            for(i;i<keyaccounts.length;i++) {
                                                if(keyaccounts[i].name == value) {
                                                    return keyaccounts[i].name;
                                                }
                                            }
                                            if(value !== 0 && value !== '') {
                                                Ext.log({msg:'No Key Account with ID '+value+' found!', level: 'warning'});
                                            }
                                            return '';
                                        },
                                        fieldLabel: 'Key Account',
                                        name: 'keyAccount'
                                    },
                                    {
                                        xtype: 'displayfield',
                                        renderer: function(value, displayField) {
                                            return Ext.util.Format.number(value, '0,000.00 %');
                                        },
                                        fieldLabel: 'USt. Satz',
                                        name: 'taxPercent'
                                    },
                                    {
                                        xtype: 'textfield',
                                        fieldLabel: 'Bestellnummer Kunde',
                                        name: 'customerOrder'
                                    },
                                    {
                                        xtype: 'hiddenfield',
                                        name: 'customerName'
                                    },
                                    {
                                        xtype: 'combobox',
                                        fieldLabel: 'PM',
                                        name: 'pmId',
                                        allowBlank: false,
                                        forceSelection: true,
                                        valueField: 'id',
                                        bind: {
                                            store: '{pmusers}'
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        fieldDefaults: {
                            labelAlign: 'top'
                        },
                        layout: {
                            type: 'hbox',
                            align: 'stretch'
                        },
                        items: [
                            {
                                xtype: 'fieldset',
                                flex: 1,
                                title: 'Rechnungsdaten',
                                itemId:'invoiceFieldset',
                                items: [
                                    {
                                        xtype: 'datefield',
                                        fieldLabel: 'Leistungsdatum',
                                        name: 'performanceDate',
                                        enableKeyEvents:true,
                                        readOnlyCls: 'x-form-readonly x-item-disabled',
                                        bind: {
                                            readOnly: '{billdateDisabled}'
                                        }
                                    },{
                                        xtype: 'datefield',
                                        fieldLabel: 'Rechn.-Dat. Debitoren',
                                        name: 'billDate',
                                        enableKeyEvents:true,
                                        readOnlyCls: 'x-form-readonly x-item-disabled',
                                        bind: {
                                            readOnly: '{billdateDisabled}'
                                        },
                                        listeners: {
                                            change: 'onBillDateChange'
                                        }
                                    },
                                    {
                                        xtype: 'numberfield',
                                        mouseWheelEnabled:false,
                                        validator: function(value) {
                                            var res = this.lookupViewModel().get('stateresult');
                                            //this here will add red color to the text if the value is negative
                                            Erp.Utils.checkNegativeNumber(this,value);
                                            if(!value && res && res.isOrdered) {
                                                return this.blankText;
                                            }
                                            return true;
                                        },
                                        reference: 'endmarginfield',
                                        fieldLabel: 'Endgültige Marge',
                                        cls:'numberfieldcustom numberfieldcustomtextalign',
                                        name: 'billMargin'
                                    },
                                    {
                                        xtype: 'numberfield',
                                        mouseWheelEnabled:false,
                                        validator: function(value) {
                                            var res = this.lookupViewModel().get('stateresult');
                                          //this here will add red color to the text if the value is negative
                                            Erp.Utils.checkNegativeNumber(this,value);
                                            if(!value && res && res.isOrdered) {
                                                return this.blankText;
                                            }
                                            return true;
                                        },
                                        fieldLabel: 'Rechn.-betrag netto €',
                                        name: 'billNetValue',
                                        readOnlyCls: 'x-form-readonly x-item-disabled',
                                        step: 10,
                                        cls:'numberfieldcustom numberfieldcustomtextalign',
                                        bind: {
                                            readOnly: '{stateresult.isBilled}'
                                        },
                                        listeners: {
                                            change: 'onBillNetChange'
                                        }
                                    },
                                    {
                                        xtype: 'displayfield',
                                        renderer: function(value, displayField) {
                                            return Erp.Utils.currency(value);
                                        },
                                        fieldLabel: 'USt',
                                        cls:'displayfieldcustom numberfieldcustomtextalign',
                                        name: 'billTaxValue'
                                    },
                                    {
                                        xtype: 'displayfield',
                                        renderer: function(value, displayField) {
                                            return Erp.Utils.currency(value);
                                        },
                                        fieldLabel: 'Rechn.-betrag brutto €',
                                        cls:'displayfieldcustom numberfieldcustomtextalign',
                                        name: 'billGrossValue'
                                    }
                                ]
                            },
                            {
                                xtype: 'fieldset',
                                flex: 1,
                                title: 'Rechnungseingang',
                                itemId:'invoiceEntryFieldset',
                                items: [
                                    {
                                        xtype: 'datefield',
                                        fieldLabel: 'Datum Rechnung bezahlt Debitoren',
                                        labelAlign: 'top',
                                        name: 'paidDate',
                                        enableKeyEvents:true,
                                        readOnlyCls: 'x-form-readonly x-item-disabled',
                                        bind: {
                                            readOnly: '{!stateresult.isBilled}'
                                        },
                                        listeners: {
                                            change: 'onPaiddateChange'
                                        }
                                    },
                                    me.processConversionMonth({
                                        xtype: 'combobox',
                                        validator: function(value) {
                                            var res = this.lookupViewModel().get('stateresult');
                                            if(!value && res && res.isBilled) {
                                                return this.blankText;
                                            }
                                            return true;
                                        },
                                        width: 180,
                                        fieldLabel:'Umsatzmonat',
                                        name:'conversionMonth',
                                        store: [
                                        ],
                                        listeners: {
                                            change: 'onConversionMonthChange'
                                        }
                                    }),
                                    {
                                        xtype: 'combobox',
                                        validator: function(value) {
                                            var res = this.lookupViewModel().get('stateresult');
                                            if(!value && res && res.isBilled) {
                                                return this.blankText;
                                            }
                                            return true;
                                        },
                                        width: 150,
                                        fieldLabel: 'Umsatzjahr',
                                        name: 'conversionYear',
                                        regex: /\d\d\d\d/,
                                        displayField: 'year',
                                        queryMode: 'local',
                                        valueField: 'year',
                                        bind: {
                                            store: '{conversionYears}'
                                        },
                                        listeners: {
                                            change: 'onNumberfieldChange'
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        layout: {
                            type: 'hbox',
                            align: 'stretch'
                        },
                        items: [
                            {
                                xtype: 'fieldset',
                                flex: 1,
                                title: 'Geprüft',
                                itemId:'checkedFieldset',
                                items: [
                                    {
                                        xtype: 'checkboxfield',
                                        fieldLabel: 'Geprüft',
                                        name: 'checked',
                                        listeners: {
                                            change: 'onCheckedChange'
                                        }
                                    },
                                    {
                                        xtype: 'displayfield',
                                        fieldLabel: 'Geprüft von',
                                        name: 'checkerName'
                                    }
                                ]
                            },
                            {
                                xtype: 'fieldset',
                                flex: 1,
                                title: 'Status',
                                items: [
                                    {
                                        xtype: 'container',
                                        layout: {
                                            type: 'hbox',
                                            pack: 'end'
                                        },
                                        items: [
                                            {
                                                xtype: 'displayfield',
                                                renderer: function(value, displayField) {
                                                    if(!value) {
                                                        return "";
                                                    }
                                                    var s = this.lookupController().stateLabels;
                                                    if(!s[value]) {
                                                        Ext.log({msg:'Status label not found: '+value, level: 'error'});
                                                        return 'Unbekannter Status';
                                                    }
                                                    return s[value];
                                                },
                                                flex: 1,
                                                fieldLabel: 'Status',
                                                name: 'state',
                                                bind: {
                                                    value: '{state}'
                                                }
                                            },
                                            {
                                                xtype: 'button',
                                                itemId:'statusComboButton',
                                                text: 'weitere Status setzen',
                                                flex: 1,
                                                menu: {
                                                    xtype: 'menu',
                                                    items: [
                                                        {
                                                            xtype: 'menuitem',
                                                            text: 'Proforma',
                                                            listeners: {
                                                                click: 'onStateProformaClick'
                                                            }
                                                        },
                                                        {
                                                            xtype: 'menuitem',
                                                            text: 'Abgelehnt',
                                                            listeners: {
                                                                click: 'onStateDeclinedClick'
                                                            }
                                                        },
                                                        {
                                                            xtype: 'menuitem',
                                                            text: 'Storniert',
                                                            listeners: {
                                                                click: 'onStateCancelledClick'
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'displayfield',
                                        renderer: function(value, displayField) {
                                            return Ext.Date.format(value, Ext.Date.defaultFormat+' H:i');
                                        },
                                        fieldLabel: 'Datum letzte Bearbeitung',
                                        name: 'modifiedDate'
                                    },
                                    {
                                        xtype: 'displayfield',
                                        fieldLabel: 'letzter Bearbeiter',
                                        name: 'editorName'
                                    }
                                ]
                            }
                        ]
                    }
                ]
            };
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    loadDefaultConfig:function(){
        var me=this,
            form=me.getForm(),
            fields=form.getFields().items;

        if(me.defaultFormFildConfig.length<1){
            for(var i=0;i<fields.length;i++){
                var field=fields[i];
                console.log(field);
                var readOnly=field.setReadOnly ? field.readOnly : false;
                var editable=field.setEditable ? field.editable : true;
                me.defaultFormFildConfig.push({
                    name:field.getName(),
                    visible:field.isVisible(),
                    required:field.allowBlank == undefined ? false : !field.allowBlank,
                    editable:editable && !readOnly
                });
            }
        }
        me.applyCustomConfig(me.defaultFormFildConfig);
    },

    applyCustomConfig:function(customConfig){
        var me=this,
            form=me.getForm();

        for(var i=0;i<customConfig.length;i++){
            var config=customConfig[i],
                field=form.findField(config.name);
            
            if(!field){
                continue;
            }

            me.setFieldIsRequired(field,config.required);
            me.setFieldIsVisible(field,config.visible);
            me.setFieldIsEditable(field,config.editable);
        }
        form.isValid();
    },

    setFieldIsRequired:function(field,required){
        if(!field || required == undefined){
            return;
        }
        field.allowBlank=!required;
        
        if(!field.allowBlank){
        	return;
        }
        
        //the field validator function must be overridden
        field.validator=function(value){
        	return true;
        };
    },
    
    setFieldIsVisible:function(field,visible){
        if(!field || visible == undefined){
            return;
        }
        field.setVisible(visible);
    },

    setFieldIsEditable:function(field,editable){
        if(!field || editable == undefined){
            return;
        }
        if(field.setReadOnly){
            field.setReadOnly(!editable);
        }
        if(field.setEditable){
            field.setEditable(editable);
        }
    },

    processConversionMonth: function(config) {
        config.store = [];
        Ext.each(Ext.Date.monthNames, function(month, idx) {
            config.store.push([idx, month]);
        });
        return config;
    },

    loadRecord: function(record) {
        var me = this;
        //cut the leading and the ending comma for target langs
        if(record.get('targetLang') != null && record.get('targetLang').startsWith(',') && record.get('targetLang').endsWith(',')){
            record.set('targetLang',record.get('targetLang').slice(1, -1))
        }
        me.getController().initConversionYears(record.get('billDate'));

        me.suspendEvent('change');
        me.getForm().getFields().each(function(){
            this.suspendEvent('change');
        });
        me.callParent(arguments);
        me.getForm().getFields().each(function(){
            this.resumeEvent('change');
        });
        me.resumeEvent('change');
        me.getController().setState(record.get('state'));
        //reload customers store
        me.getViewModel().getStore('customers').load();

        me.getViewModel().set('isReleaseDate',record.get('releaseDate')!=null);

        me.focusOnFirstEmptyField();
        
        me.setProjectManager(record);
        
        me.fireEvent('projectFormRecordLoaded',me,record);
    },
    
    /***
     * Return initialized model instance.This model is loaded on form init 
     */
    getModelInstance:function(){
    	return Ext.create('Erp.model.Project', {
            id: null,
            name: "",
            offerMargin: null,
            offerDate: new Date(),
            debitNumber: null,
            state: this.getController().states.STATE_OFFERED,
            billDate:null,
            paidDate:null,
            releaseDate:null,
            modifiedDate:new Date(),
            editorId: Erp.data.app.user.id,
            pmId: Erp.data.app.user.id,
            editorName: Erp.data.app.user.userName,
            conversionMonth:null,
            conversionYear:null,
            taxPercent: null,
            offerNetValue: 0,
            billNetValue:0,
            billTaxValue:null,
            billGrossValue:0,
            billMargin:null,
            isCustomerView:false
        });
    },
    
    //set the pointer to the first empty field
    focusOnFirstEmptyField:function(){
        Erp.Utils.focusOnFirstEmptyField(this.getForm());
    },
    
    reset: function() {
        this.suspendChangeEvents();
        this.callParent(arguments);
        this.resumeChangeEvents();
    },

    suspendChangeEvents: function() {
        this.suspendEvent('change');
        this.getForm().getFields().each(function(){
            this.suspendEvent('change');
        });
    },

    resumeChangeEvents: function() {
        this.getForm().getFields().each(function(){
            this.resumeEvent('change');
        });
        this.resumeEvent('change');
    },
    
    /***
     * Set the project manager default value on load record
     */
    setProjectManager:function(record){
    	if(!record.get('pmId')){
    		return;
    	}
    	var me=this;
    	if(Ext.StoreManager.get('pmUsers').getData().length==1){
    		me.getForm().findField('pmId').setValue(Ext.StoreManager.get('pmUsers').getAt(0).get('id'));
    	}
    }
});