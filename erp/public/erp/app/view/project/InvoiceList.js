/*
 * File: app/view/project/InvoiceList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.project.InvoiceList', {
    extend: 'Ext.window.Window',
    alias: 'widget.invoicelistwindow',

    requires: [
    	'Erp.view.project.InvoiceListViewController'
    ],

    controller: 'invoicelistwindow',
    layout: 'fit',
    autoScroll:true,
    width:'70%',
    height:'70%',
    title: 'Auch "Datum bezahlt Debitoren" folgender Rechnungen setzen?',
    modal: true,
    saveCallback:null,//save project record callback
    
    onEsc: function() {
        this.destroy();
    },
    listeners:{
    	destroy:function(){
    		this.saveCallback();
    	}
    },
    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [{

                    xtype: 'gridpanel',
                    features: [{
                        ftype: 'summary'
                    }],
                    columns: [
                        {
                            xtype: 'checkcolumn',
                            name:'columnSelect',
                            dataIndex:'columnSelect',
                            checked:true,
                            flex: 0.1,
                            text: 'Datum setzen',
                            tooltip: 'Datum setzen',
                        },
                        {
                            xtype: 'numbercolumn',
                            flex: 0.1,
                            dataIndex: 'id',
                            text: 'Auftragsnr.',
                            tooltip: 'Auftragsnummer',
                            format: '0',
                            align:'right',
                            filter: {
                                type: 'string'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            flex: 0.2,
                            dataIndex: 'debitNumber',
                            text: 'Rechn.-Nr. Deb.',
                            tooltip: 'Rechnungsnummer Debitoren',
                            format: '00',
                            filter: {
                                type: 'string'
                            }
                        },{
                            xtype: 'datecolumn',
                            flex: 0.2,
                            dataIndex: 'billDate',
                            text: 'Rechn.-Dat. Deb.',
                            tooltip: 'Rechnungsdatum Debitoren',
                            filter: {
                                type: 'date'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            flex: 0.5,
                            dataIndex: 'name',
                            text: 'Auftragsname',
                            tooltip: 'Auftragsname',
                            filter: {
                                type: 'string'
                            }
                        },
                        {
                            xtype: 'moneycolumn',
                            flex: 0.5,
                            dataIndex: 'billGrossValue',
                            text: '€ Rechn. brutto',
                            tooltip: 'Rechnungsbetrag brutto',
                            align:'right',
                            summaryRenderer: function(value) {
                                return "Summe Rechn.-betrag brutto € "+Ext.util.Format.currency(value," ");
                            },
                            summaryType: 'sum',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                }],
                dockedItems: [
                    {
                        xtype: 'container',
                        dock: 'bottom',
                        padding: 10,
                        layout: {
                            type: 'hbox',
                            align: 'middle',
                            pack: 'center'
                        },
                        items: [
                            {
                                xtype: 'button',
                                flex: 1,
                                formBind: true,
                                itemId: 'saveButton',
                                margin: 5,
                                text: 'Speichern',
                                listeners: {
                                    click: 'onSaveButtonClick'
                                }
                            },
                            {
                                xtype: 'button',
                                flex: 1,
                                itemId: 'cancelButton',
                                margin: 5,
                                text: 'Abbrechen',
                                listeners: {
                                    click: 'onCancelButtonClick'
                                }
                            }
                        ]
                    }
                ]
            };
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    }
});