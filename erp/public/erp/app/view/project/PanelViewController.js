/*
 * File: app/view/project/PanelViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.project.PanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.projectpanel',

    id:'projectViewController',
    
    config: {
        viewColumns: {
            offer: [
                'id',
                'debitNumber',
                'offerDate',
                'customerName',
                'pmName',
                'sourceLang',
                'targetLang',
                'name',
                'offerNetValue',
                'offerMargin',
                'state',
                'poCount',
                'releaseDate',
                'comments'
            ],
            project: [
                'id',
                'offerDate',
                'customerName',
                'pmName',
                'sourceLang',
                'targetLang',
                'name',
                'offerNetValue',
                'billNetValue',
                'paidDate',
                'performanceDate',
                'state',
                'poCount',
                'conversionMonth',
                'conversionYear',
                'comments'
            ],
            bill: [
                'id',
                'debitNumber',
                'billDate',
                'customerName',
                'customerNumber',
                'pmName',
                'billNetValue',
                'billTaxValue',
                'billGrossValue',
                'billMargin',
                'paidDate',
                'conversionMonth',
                'conversionYear',
                'performanceDate',
                'state',
                'poCount',
                'checked',
                'checkerName',
                'comments'
            ]
        },
        sortView:{
            offer:[{
                field:'id',
                value:'DESC'
            }],
            project:[{
                field:'id',
                value:'DESC'
            }],
            bill:[{
                field:'debitNumber',
                value:'DESC'
            }]
        }
    },
    viewType:null,//current selected view type
    activeForm:null,//current active form in view
    
    listen: {
        controller: {
            'projectForm': {
            	activeProjectFormSave: 'onActiveProjectFormSave'
            },
            '#purchaseordercreatewindow':{
                purchaseordercreated:'onButtonClick',
                reloadproject:'onButtonClick'
            }
        },
        component: {
            'projectForm #saveButton': {
                click:'saveAll'
            },
            'commentpanel #saveButton': {
                click:'saveAll'
            },
            'projectForm #cancelButton': {
                click:'cancelAll'
            },
            'commentpanel #cancelButton': {
                click:'cancelAll'
            },
            '#projectGrid':{
            	render:'onProjectGridRender'
            }
        },
        global:{
            resize:'onBrowserWindowResize'
        }
    },
    
    getViewStore:function(){
    	var me=this,
    		store=null;
    	store=me.getStore(me.getViewType());
    	if(!store || store==undefined){
    		return me.getStore('projects');
    	}
    	return store;
    },
    
    onProjectGridRender:function(grid){
    	this.setViewType(Erp.data.viewslist[0]);
    },
    
    /***
     * Called whenever the browser window size is changed
     */
    onBrowserWindowResize:function(width,height,eOpts){
        var me=this,
            pannel=me.getReferences().display;
        Erp.Utils.setCalculatedWidth(pannel);
    },
    
    onProjectPanelRender:function(panel){
        var me=this,
            map = new Ext.util.KeyMap({
                target: panel.getEl(),
                key: Ext.event.Event.ESC,
                fn: function(){
                    me.cancelAll();
                }
            });
    },
    /*
        @param {String} type The type of view to be activated
        @param {Boolean} forceBtn optional, if true set also the cycle Button
    */
    setViewType: function(type, forceBtn) {
    	var me = this;
		//the viewtype must be set first
    	me.viewType=type;
    	me.getView().initActiveForm();
    	
		var viewStore=me.getViewStore(),
        	sorters = viewStore.getSorters(),
            //cols = me.lookupReference('list').columns,
        	cols = me.getView().down('#projectGrid').getColumns(),
            toShow = me.config.viewColumns[type] ? me.config.viewColumns[type] : [],
            sortView=me.config.sortView[type],
            sortView=sortView && sortView[0],//get the first configured sorter
            viewfilters = Erp.data.project.viewfilters,
            grid=me.getView().down('#projectGrid');

            
        me.getActiveForm().getViewModel().getStore('customers').load();
        grid.setStore(viewStore);
        
        if(forceBtn) {
            me.lookupReference('viewtypebtn').setViewType(type); //this does not trigger a change event!
        }

        Ext.each(cols, function(col) {
            if(viewfilters[type] && viewfilters[type][col.dataIndex]) {
            	
            	//if the defined config value is array, set the filter value
            	if(Array.isArray(viewfilters[type][col.dataIndex])){
            		col.filter.setValue(viewfilters[type][col.dataIndex]);
            	}else{
            		//the config filter is also defined by type
            		var tmpFilter=viewfilters[type][col.dataIndex];
            		//foreach filter type, set the value
            		//ex: available types (in,notInList,gt,eq,lt)
            		for (var key in tmpFilter) {
            		    // skip loop if the property is from prototype
            		    if (!tmpFilter.hasOwnProperty(key)){
            		    	continue;
            		    }
            		    
            		    //foreach field in the grid filter, check if there is configured value to set
            		    //if no value is set for the field, reset the value
            		    for (var filterField in col.filter.filter) {
            		    	var field=col.filter.filter[filterField];
            		    	if(filterField==key){
            		    		field.setValue(tmpFilter[key]);
            		    	}else{
            		    		field.setValue(Erp.Utils.getGridFilterResetValue(filterField));	
            		    	}
            		    }
            		}
            		col.filter.setActive(true);
            	}
            }else{
            	//set the internala active value to false, so the set active is triggered
            	col.filter.active=true;
            	col.filter.setActive(false);
            }
            col.setVisible(Ext.Array.contains(toShow, col.dataIndex));
        });

        if(sorters.length != 0){
            sorters.clear();
        }
        
        if(!sortView){
        	return;
        }
        
        //apply the sorters for the curent view
        viewStore.setSorters([{
            property:sortView['field'],
            direction:sortView['value']
        }]);
    },

    /***
     * Return the current selected view type
     */
    getViewType:function(){
        return this.viewType;
    },
    
    /***
     * Return the current active form
     */
    getActiveForm:function(){
        return this.activeForm;
    },

    onActiveProjectFormSave: function(form, record, eventOptions) {
    	var me=this;
        me.saveCommentAfterForm();
    },
    
    saveComment:function(){
        var panel = this.getView().down('panel commentpanel');
        panel.saveComment();
    },
    cancelComment:function(){
        var panel = this.getView().down('panel commentpanel');
        panel.cancelComment();
    },
    
    formsAreDirty: function(callback) {
        var me = this,
            refs = me.getReferences(),
            comments = refs.commentpanel,
            formPanel = me.getActiveForm();

        
        if(!formPanel.isDirty() && !comments.isDirty()) {
            return false;
        }
        Ext.MessageBox.confirm('Ungespeicherte Änderungen', 'Sie haben aktuell ungespeicherte Änderungen, sollen diese verworfen werden?', function(btn){
            if(btn == 'yes'){
                formPanel.reset();
                comments.reset();
                callback();
            }
        }, this);
        return true;

    },

    dblclick: function(dataview, record, item, index, e, eOpts) {
        var me = this,
        	activeForm=me.getActiveForm(),
            vm = me.getViewModel(),
            refs = me.getReferences();

        // Set selected record
        vm.set('record', record);
        vm.set('state', record.get('state'));
        
        activeForm.loadRecord(record);
        
        // show project form
        refs.display.show();

        activeForm.isValid();
    },

    onRowModelSelectionChange: function(model, selected, eOpts) {
        var me=this;
        me.getViewModel().set('isOrderSelected', selected.length > 0);
        me.getSelectedRowsSum(selected);
    },

    onBeforeProjectDblClick: function(dataview, record, item, index, e, eOpts) {
        var me = this,
            origArgs = arguments,
            yesCallback = function(){
                me.dblclick.apply(me, origArgs);
            };

        if(me.formsAreDirty(yesCallback)) {
            return false;
        }
    },

    onProjectAddClick:function(button, e, eOpts){
    	var me=this;
    	me.add();
    },
    
    add: function(record) {
        var me = this,
            refs = me.getReferences(),
            formPanel = me.getActiveForm(),
            form = formPanel.getForm(),
            newRecord=record || formPanel.getModelInstance(),
            vm = me.getViewModel(),
	        yesCallback = function(){
	            me.add();
	        };

        if(me.formsAreDirty(yesCallback)) {
            return;
        }

        // Clear form
        formPanel.reset();

        // show project form
        refs.display.show();
        
        	
        // Set record
        formPanel.loadRecord(newRecord);
        vm.set('record', newRecord);

        // Set title
        vm.set('title', 'Angebot hinzufügen');

        form.isValid();

        //focus the project name
        form.findField('name').focus();
    },

    onPoAddClick: function(button, e, eOpts) {
    	var me=this,
    		projectGrid=me.getView().down('#projectGrid');
        me.fireEvent('addPo', projectGrid.getSelectionModel().getLastSelected());
    },

    exportXls: function(button, e, eOpts) {
        var me=this,
        	params = {},
            store = this.getViewStore(),
            proxy = store.getProxy();

        params[proxy.getFilterParam()] = proxy.encodeFilters(store.getFilters().items);
        params[proxy.getSortParam()] = proxy.encodeSorters(store.getSorters().items);
        params['customerview'] = me.getViewType();
        window.open('erp/order/excel?'+Ext.urlEncode(params));
    },

    onButtonClick: function(button, e, eOpts) {
    	this.getViewStore().load();
    },

    onCycleChange: function(cycle, item, eOpts) {
        var key = item.itemId.replace(/-view-btn/, '');
        this.setViewType(key);
    },

    onBufferedStoreLoad: function(store, records, successful, eOpts) {
        var me=this,
            params = {},
            proxy = store.getProxy(),
            sumpanel = me.getReferences().sumpanel,
            sumpanelselected =me.getReferences().sumpanelselected;
        
        params[proxy.getFilterParam()] = proxy.encodeFilters(store.getFilters().items);
        params[proxy.getSortParam()] = proxy.encodeSorters(store.getSorters().items);
        sumpanel.setHtml('');
        sumpanelselected.setHtml('');
        sumpanel.loader.load({params:params});
    },

    /***
     * Before the project store is loaded, attach the viewtype variable as extra param.
     */
    onProjectsStoreBeforeLoad:function( store, operation, eOpts){
        var me=this,
            proxy=store.getProxy(),
            merged = Ext.merge({}, proxy.getExtraParams(), {
                customerview:me.getViewType()
            });
        proxy.setExtraParams(merged);
    },

    clearFilterAndSort:function(){
        var me = this,
            store = me.getViewStore(),
            sorters = store.getSorters(),
            sortView=me.config.sortView[me.viewType],
            sortView=sortView[0];//get the first configured sorter

        if(sorters.length != 0){
            sorters.clear();
        }
        //disable the reloading of the store (clearFilter() and setViewType() will reload the store)
        store.remoteFilter = false;
        store.clearFilter();
        me.setViewType(me.viewType);
        store.remoteFilter = true;
        
        //this will reload the store
        sorters.add([{
            property:sortView['field'],
            direction:sortView['value']
        }]);
    },
    
    /***
     * Executed whenever we save comment or form
     */
    saveAll:function(component,e,eOpts){
    	this.getActiveForm().getController().save(component,e,eOpts);
    },
    
    cancelAll:function(button){
    	var me=this;
        me.getActiveForm().getController().cancelEdit();
        me.cancelComment();
        me.getReferences().display.hide();
        me.getViewModel().set('record', false);
    },
    
    /***
     * This function is called after the project form is saved.
     * This will also save the comment(if the comment pannel is unsaved)
     */
    saveCommentAfterForm:function(){
        var me = this,
            panelview = this.getView().down('panel commentpanel'),
            vm=panelview.getViewModel(),
            record=vm.get('record'),
            states = Erp.data.project.states;
        
            me.saveComment();
            me.getViewModel().set('record', false);
            me.getReferences().display.hide();
            
            //switch the view type only if we are not in offer view
            //switching the view will reload the gridview (clear the filters and sorters)
            if(record.get('state') == states.STATE_OFFERED && me.viewType!='offer') {
                //TODO this does trigger the store load twice, once for the sorter, and once for the filters in setViewType
                me.getViewStore().sort('id', 'DESC');
                me.viewType='offer';
                me.setViewType(me.getViewType(), true);
            }
            else {
                me.getViewStore().load();
            }
    },
    getSelectedRowsSum:function(selected){
        var me = this,
            refs = me.getReferences(),
            sumpanelselected=refs.sumpanelselected,
            ids="",
            params={};
        sumpanelselected.setHtml('');
        if(selected.length <= 0){
            return;
        }
        for(var i=0;i<selected.length;i++){
            ids+=","+selected[i].id;
        }
        params["filter"]='[{"operator":"in","value":['+ids.substr(1)+'],"property":"id"}]';
        sumpanelselected.loader.load({params:params});
    }
});
