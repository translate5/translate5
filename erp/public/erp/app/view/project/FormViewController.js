/*
 * File: app/view/project/FormViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.project.FormViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.projectForm',

    id: 'projectForm',
    listen: {
        controller: {
            '*': {
                customerSaved: 'handleCustomerSave'
            }
        }
    },

    correctConversion: function(date, yearField, monthField) {
        var me = this,
            newMonth = date.getMonth(),
            newYear = date.getFullYear(),
            month = Ext.Date.monthNames[newMonth] || '???',
            msg = 'Monat und / oder Jahr des Rechnungsdatum entsprechen nicht dem Umsatzjahr bzw. -monat?';
        msg = msg + ' Sollen der Umsatzmonat auf "{0}" und das Umsatzjahr auf "{1}" korrigiert werden?';

        Ext.Msg.confirm('Unterschiede im Rechnungs- und Umsatzdatum!', Ext.String.format(msg, month, newYear), function(result) {
            if (result != 'yes') {
                return;
            }
            yearField.setValue(newYear);
            monthField.setValue(newMonth);
        });
    },

    /*
        'proforma': 'proforma',
        'offered': 'angeboten',
        'declined': 'abgelehnt',
        'ordered': 'beauftragt',
        'cancelled': 'storniert',
        'billed': 'berechnet',
        'paid':'bezahlt'
    */
    setState: function(state) {
        var me = this,
            vm = me.getViewModel();
        switch(state){
                //the following states are resetting some dates, and disable them:
            case me.states.STATE_PROFORMA:
            case me.states.STATE_DECLINED:
            case me.states.STATE_CANCELLED:
                me.resetDateFields();
                vm.set('stateresult.isOrdered', false);
                vm.set('stateresult.isBilled', false);
                vm.set('stateresult.isPaid', false);
                break;
            case me.states.STATE_OFFERED:
                vm.set('stateresult.isOrdered', false);
                vm.set('stateresult.isBilled', false);
                vm.set('stateresult.isPaid', false);
                break;
            case me.states.STATE_ORDERED:
                this.updateBillNetValue();
                this.updateBillMargin();
                vm.set('stateresult.isOrdered', true);
                vm.set('stateresult.isBilled', false);
                vm.set('stateresult.isPaid', false);
                break;
            case me.states.STATE_BILLED:
                vm.set('stateresult.isOrdered', true);
                vm.set('stateresult.isBilled', true);
                vm.set('stateresult.isPaid', false);
                break;
            case me.states.STATE_PAID:
                vm.set('stateresult.isOrdered', true);
                vm.set('stateresult.isBilled', true);
                vm.set('stateresult.isPaid', true);
                break;
            default:
                Ext.log({msg: 'State not found: '+state, level: 'warn'});
                return;
        }
        vm.set('state', state);
        me.getView().getForm().isValid();
    },

    init: function() {
        this.states = Erp.data.project.states;
        this.stateLabels = Erp.data.project.stateLabels;
        this.callParent(arguments);
    },

    /* Updates the billBetValue from offerValue, only if billNetValue was empty */
    updateBillNetValue: function() {
        var form = this.getView().getForm(),
            billField = form.findField('billNetValue');
        if(!billField.getValue()) {
            billField.setValue(form.findField('offerNetValue').getValue());
        }
    },

    /* Updates the billMargin from offerMargin, only if billMargin was empty */
    updateBillMargin: function() {
        var form = this.getView().getForm(),
            billMargin = form.findField('billMargin');
        if(!billMargin.getValue()) {
            billMargin.setValue(form.findField('offerMargin').getValue());
        }
    },

    handleCustomerSave: function(record) {
        this.getStore('customers').load();
    },

    initConversionYears: function(billDate) {
        var store = this.getStore('conversionYears'),
            date = (billDate && billDate.length >9) || new Date(),
            year = date.getFullYear();

        store.removeAll();
        if(date.getMonth() === 0) {
            year--;
            store.add({year: year++});
        }
        store.add({year: year++});
        store.add({year: year++});
        store.add({year: year});
    },

    updateBillGross: function(netValue) {
        var form = this.getView().getForm(),
            tax = form.findField('taxPercent').getValue(),
            ust = netValue * (tax/100),
            salesTax = form.findField('billTaxValue'),
            billGrossValue = form.findField('billGrossValue');

        salesTax.setValue(ust);
        billGrossValue.setValue(ust + netValue);
    },

    resetDateFields: function(state) {
        var form = this.getView().getForm();
        form.findField('releaseDate').setValue(null);
        form.findField('billDate').setValue(null);
        form.findField('paidDate').setValue(null);
        form.findField('conversionMonth').setValue(null);
        form.findField('conversionYear').setValue(null);
        form.findField('performanceDate').setValue(null);
        form.findField('plannedDeliveryDate').setValue(null);
    },

    onReleaseDateChange: function(field, newValue, oldValue, eOpts) {
        var me=this,
            isReleaseDate=false;
        if(field.isValid()) {
            me.setState(!newValue ? this.states.STATE_OFFERED : this.states.STATE_ORDERED);
        }
        if(field.isValid() && field.getValue()!=null){
            isReleaseDate=true;
        }
        this.getViewModel().set('isReleaseDate',isReleaseDate);
    },

    onCustomerChange: function(field, newValue, oldValue, eOpts) {
        var me=this,
            customer = field.findRecordByValue(newValue),
            view=me.getView(),
            form = view.getForm(),
            isDisplayVisible = view.up('panel').isVisible();

        if(!customer || !isDisplayVisible) {
            form.findField('customerId').setValue(null);
            return;
        }

        form.findField('customerName').setValue(customer.get('name'));
        form.findField('taxPercent').setValue(customer.get('taxPercent'));
        var i = 0,
            keyacc ="",
            keyaccounts = Erp.data.customers.keyaccounts;
        
        for(i;i<keyaccounts.length;i++) {
            if(keyaccounts[i].id == customer.get('keyaccount')) {
                keyacc = keyaccounts[i].name;
                break;
            }
        }
        form.findField('keyAccount').setValue(keyacc);
        form.findField('customerNumber').setValue(customer.get('number'));
        me.updateBillGross(form.findField('billNetValue').getValue());

    },

    onBillDateChange: function(field, newValue, oldValue, eOpts) {
        var me = this,
            form = me.getView().getForm(),
            conYearField = form.findField('conversionYear'),
            conMonthField = form.findField('conversionMonth'),
            yearDiff = (newValue && newValue.length >9) && (newValue.getFullYear() != form.findField('conversionYear').getValue()),
            monthDiff = (newValue && newValue.length >9) && (newValue.getMonth() != form.findField('conversionMonth').getValue());
        me.initConversionYears(newValue);
        //preset conFields only if no oldValue was given, and the conFields were empty
        if(!oldValue && !conYearField.getValue() && !conMonthField.getValue()) {
            if(field.isValid()){
                conMonthField.setValue(newValue.getMonth());
                conYearField.setValue(newValue.getFullYear());
            }
        }else if(yearDiff || monthDiff) {
            me.correctConversion(newValue, conYearField, conMonthField);
        }
        if(field.isValid()) {
            me.setState(!newValue ? me.states.STATE_ORDERED : me.states.STATE_BILLED);
        }
    },
    
    onBillNetChange: function(field, newValue, oldValue, eOpts) {
        this.updateBillGross(newValue);
    },

    onPaiddateChange: function(field, newValue, oldValue, eOpts) {
        if(field.isValid()) {
            this.setState(!newValue ? this.states.STATE_BILLED : this.states.STATE_PAID);
        }
    },

    onConversionMonthChange: function(field, newValue, oldValue, eOpts) {
        var form = this.getView().getForm(),
            store = field.store,
            billDate = form.findField('billDate').getValue(),
            msg = 'Der von Ihnen eingegebene Umsatzsmonat "{0}" weicht von dem hinterlegten Rechnungsmonat "{1}" ab. Sind Sie sich sicher?',
            newMonth, oldMonth;

        if(billDate && newValue && newValue != billDate.getMonth()) {
            newMonth = store.getAt(newValue);
            oldMonth = store.getAt(billDate.getMonth());
            if(!newMonth || !oldMonth) {
                return;
            }
            newMonth = newMonth.data.field2;
            oldMonth = oldMonth.data.field2;
            Ext.MessageBox.confirm("Umsatzmonat weicht von Rechnungsdatum ab!", Ext.String.format(msg, newMonth, oldMonth), function(btn) {
                if(btn !== 'yes') {
                    field.setValue(oldValue);
                }
            });
        }
    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var form = this.getView().getForm(),
            billDate = form.findField('billDate').getValue(),
            msg = 'Das von Ihnen eingegebene Umsatzsjahr "{0}" weicht von dem hinterlegten Rechnungsjahr "{1}" ab. Sind Sie sich sicher?';
        if(billDate && newValue && newValue != billDate.getFullYear()) {
            Ext.MessageBox.confirm("Umsatzmonat weicht von Rechnungsdatum ab!", Ext.String.format(msg, newValue, billDate.getFullYear()), function(btn) {
                if(btn !== 'yes') {
                    field.setValue(oldValue);
                }
            });
        }
    },

    onCheckedChange: function(field, newValue, oldValue, eOpts) {
        var form = this.getView().getForm(),
            checker = form.findField('checkerName');

        if(newValue) {
            checker.setValue(Erp.data.app.user.userName);
        }
        else {
            checker.setValue('');
        }
    },
    
    onStateProformaClick: function(item, e, eOpts) {
        this.setState(this.states.STATE_PROFORMA);
    },

    onStateDeclinedClick: function(item, e, eOpts) {
        this.setState(this.states.STATE_DECLINED);
    },

    onStateCancelledClick: function(item, e, eOpts) {
        this.setState(this.states.STATE_CANCELLED);
    },
    
    save: function(component,e,eOpts) {
        var me = this,
            formPanel = me.getView(),
            form=formPanel.getForm(),
            record = form.getRecord(),
            reloadPo=false,
            targetLangField=form.findField('targetLang');

        if (!formPanel.isValid()) {
            return;
        }

        // Update associated record with values
        formPanel.updateRecord();

        if(record.get('checked')) {
            record.set('checkerId', Erp.data.app.user.id);
        }
        if(record.get('keyAccount') === 0) {
            record.set('keyAccount', null);
        }
        
        if(form.findField("state").orginalValue!=record.get('state')){
            reloadPo=true;
        }
        
        if(record.get('targetLang') != null && record.get('targetLang')!=""){
            record.set('targetLang',","+record.get('targetLang')+",")
        }
        //set the targetLang form record if targetLang is disabled (if 'Freigabedatum' is set after the user pick target languages than selected langs will be ignored)
        if(targetLangField.isDisabled() && targetLangField.getValue().length > 0){
            var vals=targetLangField.getValue(),
                strVals=',';
            vals.forEach(function(element) {
                strVals+=element+',';
            });
            record.set('targetLang',strVals);
        }
        
        
        //the callback will be called by checkPaidDateStatus
        var saveRecordCalback=function(){
        	record.save({
        		params:{
        			customerview:me.getView().up('#projectpanel').getController().getViewType()
        		},
        		success: function(newRecord) {
        			Erp.MessageBox.addSuccess('Projekt gespeichert!');
        			me.fireEvent('activeProjectFormSave', formPanel,newRecord,component);
        			formPanel.reset();
        			
        			if(!reloadPo){
        				return;
        			}
        			//reload PO when the project status is changed
        			me.fireEvent('projectStateChange',formPanel,newRecord,component);
        		},
        		failure: Erp.app.getController('ServerException').invokeFormCallback(formPanel)
        	});
        };
        
        if(!me.fireEvent('beforeActiveProjectFormSave',formPanel,record,saveRecordCalback)){
        	return;
        }
        
        //check related invoices with from the same customer and same billDate
        me.checkPaidDateStatus(saveRecordCalback);
    },

    cancelEdit: function(button, e, eOpts) {
        // Clear form
        this.getView().getForm().reset();
        //reset the vm state variable (this is the only one vm variable)
        this.getViewModel().set('state',null);
    },
    
    /***
     * Check if there are other invoices from same customer, same billDate and with 
     * status billed. If yes show show the invoice window.
     */
    checkPaidDateStatus:function(saveRecordCalback){
    	var me=this,
	        form = me.getView().getForm(),
	        record = form.getRecord(),
	        paidDate=form.findField('paidDate'),
	        isDateChanged=paidDate.originalValue!=paidDate.getValue();

    	//if the date is changed and if the actual date in not empty
    	if(!isDateChanged || paidDate.rawValue==""){
    		saveRecordCalback();
    		return;
    	}
    	var store=Ext.create('Erp.store.Projects'),
    		win=Ext.create('Erp.view.project.InvoiceList'),
    		filter=[{
    			operator:"eq",
    			property:"customerNumber",
    			value:record.get('customerNumber')
    		},{
    			operator:"eq",
    			property:"state",
    			value:me.states.STATE_BILLED
    		},{
    			operator:"eq",
    			property:"billDate",
    			value:Ext.util.Format.date(form.findField('billDate').getValue(),'Y-m-d')
    		},{
    			operator:"notInList",
    			property:"id",
    			value:[record.get('id')]
    		}];
    	
    	//encode the filter
    	filter=JSON.stringify(filter);
    	store.load({
    		params:{
    			filter:filter
    		},
    	    callback: function(records, operation, success) {
    	    	if(!success){
    	    		Erp.app.getController('ServerException').handleFailedRequest(operation);
    	    		saveRecordCalback();
    	    		return;
    	    	}
    	    	
    	    	if(!records || records.length<1){
    	    		saveRecordCalback();
    	    		return;
    	    	}

    	    	//set the selected colum checked by default
    	    	store.each(function(record,id){
    	    		record.set('columnSelect',true);
    	    		record.set('paidDate',form.findField('paidDate').getValue());
    	    		record.set('state',me.states.STATE_PAID);
    	    	});
    	    	
    	    	//set the store and save record callback
    	    	win.down('grid').setStore(store);
    	    	win.saveCallback=saveRecordCalback;
    	    	win.show();
    	    }
    	})
    },
    
    /**
     * On customer store load event handler. The customer store is defined in the view model
     */
    onCustomersStoreLoad:function(){
        var me=this,
            view=me.getView(),
            form=view && view.getForm(),
            record=form && form.getRecord()
        if(!view.isVisible(true) || !record){
            return;
        }
        var customersStore=me.getViewModel().getStore('customers')
            customer=customersStore.getById(record.get('customerId'));
        
        if(!customer){
            return;
        }
        
        var customerTax = parseInt(customer.get('taxPercent')),
            documentTax = parseInt(record.get('taxPercent')),
            hasDifferentTax = customer && customerTax!==documentTax,
            isInvoice=Ext.Array.contains(["billed","paid"], record.get('state'));
        
        //when the document tax is different as the customer tax
        //and it is not an invoice, display info message that the document tax is going to be changed
        if(hasDifferentTax && !isInvoice){
            var msg = 'Das aktuelle Dokument hat einen anderen Mehrwertsteuersatz, als der Mehrwertsteuersatz des Kunden. Soll der Mehrwertsteuersatz des Kunden ({0}) für das aktuelle Dokument übernommen werden?';
            Ext.MessageBox.confirm("Unterschiedlicher Mehrwertsteuersatz", 
                    Ext.String.format(msg, customer.get('name')), 
            function(btn) {
                if(btn === 'yes') {
                    //call the onchange customer function. This will update all new customer values and trigger the neto/bruto values calculation
                    me.onCustomerChange(form.findField('customerId'),customer.get('id'),form.findField('customerId').getValue());
                }
            });
        }
    }
});
