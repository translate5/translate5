/*
 * File: app/view/comment/Panel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.comment.Panel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.commentpanel',

    requires: [
        'Erp.view.comment.PanelViewModel',
        'Erp.view.comment.PanelViewController',
        'Ext.form.Panel',
        'Ext.form.field.TextArea',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Action'
    ],

    config: {
        foreignRecord: null
    },

    controller: 'commentpanel',
    viewModel: {
        type: 'commentpanel'
    },
    reference: 'commentpanel',
    title: 'Kommentare',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    bind: {
        foreignRecord: '{record}'
    },
    listeners: {
        expand: 'onPanelExpand',
        foreignRecordChanged: 'onPanelForeignRecordChanged'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'form',
                        reference: 'commentform',
                        bodyPadding: 10,
                        trackResetOnLoad: true,
                        items: [
                            {
                                xtype: 'textareafield',
                                anchor: '100%',
                                fieldLabel: 'Neuer Kommentar',
                                labelAlign: 'top',
                                allowBlank: false,
                                bind: {
                                    value: '{commentText}'
                                }
                            }
                        ],
                        dockedItems: [
                            {
                                xtype: 'toolbar',
                                dock: 'bottom',
                                ui: 'footer',
                                layout: {
                                    type: 'hbox',
                                    pack: 'end'
                                },
                                items: [
                                    {
                                        xtype: 'button',
                                        formBind: true,
                                        text: 'Speichern',
                                        itemId: 'saveButton'
                                    },
                                    {
                                        xtype: 'button',
                                        text: 'Abbrechen',
                                        itemId: 'cancelButton'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        xtype: 'gridpanel',
                        flex: 1,
                        cls: 'comments-grid',
                        height: '100%',
                        width: '98%',
                        manageHeight: false,
                        hideHeaders: true,
                        reserveScrollbar: true,
                        bind: {
                            store: '{comments}'
                        },
                        columns: [
                            me.processCommentColumn({
                                xtype: 'gridcolumn',
                                renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                    var modified = Ext.Date.format(record.get('modified'), "Y-m-d H:i:s"),
                                        created = Ext.Date.format(record.get('created'), "Y-m-d H:i:s"),
                                        data = {
                                            content: value,
                                            isMod: (created !== modified),
                                            created: created,
                                            modified: modified,
                                            label: 'bearbeitet',
                                            author: record.get('userName')
                                        };
                                    return metaData.column.commentTpl.apply(data);
                                },
                                dataIndex: 'comment',
                                text: 'String',
                                flex: 1
                            }),
                            {
                                xtype: 'actioncolumn',
                                items: [
                                    {
                                        handler: 'editComment',
                                        iconCls: 'ico-comment-edit'
                                    },
                                    {
                                        handler: 'confirmDeleteComment',
                                        iconCls: 'ico-comment-delete'
                                    }
                                ]
                            }
                        ],
                        viewConfig: {
                            getRowClass: function(record, rowIndex, rowParams, store) {
                                if(record.get('isEditable')) {
                                    return 'comment-editable';
                                }
                                return 'comment-readonly';
                            }
                        },
                        listeners: {
                            itemdblclick: 'onCommentDblClick'
                        }
                    }
                ]
            };
        me.processCommentPanel(config);
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processCommentColumn: function(config) {
        config.commentTpl = new Ext.XTemplate([
            '<div class="comment">',
            '<span class="content">{content}</span>',
            '<span class="author">{author}</span> - ',
            '<span class="created">{created}</span>',
            '<tpl if="isMod">',
                ' <span class="modified">({label} {modified})</span>',
            '</tpl>',
            '</div>'
        ]);
        return config;
    },

    processCommentPanel: function(config) {
        //overriding the original viewModel config to inject comment context information
        config.viewModel = {
            type: 'commentpanel',
            context: this.initialConfig.parentConfig
        };
    },

    isDirty: function() {
        return this.refs.commentform.isDirty();
    },

    reset: function() {
        return this.refs.commentform.getForm().reset();
    },

    setForeignRecord: function(record) {
        this.fireEvent('foreignRecordChanged', record);
    },
    saveComment:function(){
        var me=this,
            vc=me.getController();
        vc.onSaveClick();
    },
    cancelComment:function(){
        var me=this,
            vc=me.getController();
        vc.onCancelClick();
    }

});