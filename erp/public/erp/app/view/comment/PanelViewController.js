/*
 * File: app/view/comment/PanelViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.comment.PanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.commentpanel',

    id: 'commentform',

    init: function() {
        var v = this.getView();
        if(!v.parentConfig){
            Ext.Error.raise('No parentConfig given to comment.Panel!');
        }
        this.getViewModel().set('parentConfig', v.parentConfig);
        this.callParent(arguments);
    },

    deleteComment: function(record) {
        var refs = this.getReferences(),
            form = refs.commentform.getForm(),
            vm = this.getViewModel(),
            loaded = vm.get('commentRecord');
        if(loaded == record) {
            vm.set('commentRecord',null);
            vm.set('commentText','');
            form.reset();
        }
        record.erase({
            success: function() {
                vm.get('record').load();
            }
        });
    },

    onSaveClick: function(button, e, eOpts) {
        var me = this,
            refs = me.getReferences(),
            vm = me.getViewModel(),
            record = vm.get('commentRecord'),
            foreign = vm.get('record');

        if(!record) {
            record = me.getStore('comments').model.create({
                foreignId: foreign.get('id')
            });
            vm.set('commentRecord', record);
        }
        if(!vm.get('commentText')){
            return;
        }
        record.set('comment', vm.get('commentText'));
        record.save({
            success: function() {
                var form = refs.commentform.getForm();
                vm.set('commentRecord', null);
                vm.set('commentText', '');
                vm.getStore('comments').load();
                //FIXME console.log("Is form set?", form); //form is not resetted!?
                form.reset();
            }
        });
    },

    onCancelClick: function(button, e, eOpts) {
        var refs = this.getReferences(),
            form = refs.commentform.getForm(),
            rec = form.getRecord();

        // Clear form
        form.reset();
    },

    editComment: function(view, rowIndex, colIndex, item, e, record, row) {
        var vm = this.getViewModel();
        if(!record.get('isEditable')) {
            return;
        }
        vm.set('commentRecord', record);
        vm.set('commentText', record.get('comment'));
    },

    confirmDeleteComment: function(view, rowIndex, colIndex, item, e, record, row) {
        var me = this;
        if(!record.get('isEditable')) {
            return;
        }
        Ext.MessageBox.confirm("Kommentar löschen?", 'Soll der ausgewählte Kommentar wirklich gelöscht werden?', function(btn) {
            if(btn === 'yes') {
                me.deleteComment(record);
            }
        });
    },

    onCommentDblClick: function(dataview, record, item, index, e, eOpts) {
        var vm = this.getViewModel();
        if(!record.get('isEditable')) {
            return;
        }
        vm.set('commentRecord', record);
        vm.set('commentText', record.get('comment'));
    },

    onPanelExpand: function(p, eOpts) {
        var vm = this.getViewModel(),
            rec = vm.get('record');
        this.onPanelForeignRecordChanged(rec);
    },

    onPanelForeignRecordChanged: function(record, eventOptions) {
        var vm = this.getViewModel(),
            rec = vm.get('record'),
            store = this.getStore('comments');

        if(!record || this.getView().collapsed) {
            return;
        }
        store.removeAll(true);
        store.clearFilter(true);
        store.addFilter({
            operator: 'eq',
            property: vm.get('parentConfig').key,
            value: rec.get('id')
        });
        //store.load();
    }

});
