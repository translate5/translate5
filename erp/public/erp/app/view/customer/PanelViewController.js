/*
 * File: app/view/customer/PanelViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.customer.PanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.customerpanel',
    
    dblclick: function(dataview, record, item, index, e, eOpts) {
        var formPanel = this.getReferences().form,
            vm = this.getViewModel();

        //FIXME: Beim Öffnen eines anderen Datensatzes wird der aktuell geöffnete gespeichert. Inkl validation etc. pp.
        vm.set('record', record);
        vm.set('title', 'Kunde bearbeiten');

        formPanel.loadRecord(record);
        //console.log(record);
    },

    save: function(button, e, eOpts) {
        var me = this,
            formPanel = me.getReferences().form,
            form = formPanel.getForm(),
            record = form.getRecord(),
            store = me.getStore('customers'),
            saving = 'Kunde wird gespeichert...';

        // Valid
        if (!form.isValid()) {
            return;
        }

        // Update associated record with values
        form.updateRecord();

        me.getView().mask(saving);

        record.save({
            success: function() {
                Erp.MessageBox.addSuccess('Kunde "'+record.get('name')+'" gespeichert!');
                store.load();
                me.fireEvent('customerSaved', record);
                me.getView().unmask();
                me.cancelEdit();
            },
            failure: Erp.app.getController('ServerException').invokeFormCallback(formPanel, function(){
                me.getView().unmask();
            })
        });
    },

    onCustomerPanelRender:function(cmp){
        var me=this,
            map = new Ext.util.KeyMap({
                target: cmp.getEl(),
                key: Ext.event.Event.ESC,
                fn: function(){
                    me.cancelEdit();
                }
            });
    },
    
    cancelEdit: function(button, e, eOpts) {
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            vm = this.getViewModel();

        // Clear form
        form.reset();
        vm.set('record', false);
    },

    add: function(button, e, eOpts) {
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            newRecord = Ext.create('Erp.model.Customer',{
                id: null
            }),
            vm = this.getViewModel();

        // Clear form
        form.reset();

        // Set record
        form.loadRecord(newRecord);
        vm.set('record', newRecord);

        // Set title
        vm.set('title', 'Kunde hinzufügen');

        //focus on first empty field
        Erp.Utils.focusOnFirstEmptyField(formPanel.getForm());
    },

    refresh: function(button, e, eOpts) {
        this.getReferences().list.getSelectionModel().deselectAll();
        //FIXME reload does not work, must use load instead!
        this.getStore('customers').load();
    },
    //when customers panel is displayed,this function is executed
    reloadCustomerStore:function(){
        this.getStore('customers').load();
    },
    //clear filters and sorting in customer grid
    clearFilterAndSort:function(){
        var me = this,
            store = me.getStore('customers'),
            filters = me.getView().down('gridpanel').filters,
            sorters = store.sorters;
        if(sorters.length != 0){
            sorters.clear();
        }
        if(store.getFilters().length > 0){
          //reloading of the store is caused by clearFilter call
          filters.clearFilters();
        }
        else {
          store.reload();
        }
    }
});
