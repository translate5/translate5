/*
 * File: app/view/customer/PanelViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.customer.PanelViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.customerpanel',

    requires: [
        'Ext.data.BufferedStore',
        'Ext.util.Sorter',
        'Ext.data.Store',
        'Ext.data.field.Integer',
        'Ext.data.field.String'
    ],

    data: {
        title: 'Kunde bearbeiten',
        record: false
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                stores: {
                    customers: {
                        type: 'buffered',
                        pageSize: 200,
                        autoLoad: true,
                        model: 'Erp.model.Customer',
                        suppressNextFilter: true,//this will disable the store to be loaded when onFilterEndUpdate is called,it is restored to the defaults in panel initComponent method
                        sorters: {
                            property: 'name'
                        }
                    },
                    keyaccounts: me.processKeyaccounts({
                        fields: [
                            {
                                type: 'int',
                                name: 'id'
                            },
                            {
                                type: 'string',
                                name: 'name'
                            }
                        ]
                    }),
                    taxsets: me.processTaxsets({
                        fields: [
                            {
                                type: 'int',
                                name: 'id'
                            },
                            {
                                type: 'string',
                                name: 'text'
                            }
                        ]
                    })
                }
            };
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processKeyaccounts: function(config) {
        config.data = Ext.Array.clone(Erp.data.customers.keyaccounts);
        config.data.unshift({id: null, name: '- Kein Keyaccount -'});
        return config;
    },

    processTaxsets: function(config) {
        config.data = Erp.data.customers.taxsets;
        return config;
    }

});