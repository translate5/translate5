/*
 * File: app/view/purchaseOrders/PanelViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.purchaseOrders.PanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.purchaseorderspanel',

    listen: {
        controller: {
            '#purchaseorderform': {
                formsave: 'onFormFormsave'
            },
            '#purchaseordercreatewindow': {
                purchaseordercreated: 'reload'
            },
            '#projectform':{
                projectStateChange:'reload'
            }
        },
        component: {
            'purchaseordersform #saveButton': {
                click:'saveAll'
            },
            'commentpanel #saveButton': {
                click:'saveAll'
            },
            'purchaseordersform #cancelButton': {
                click:'cancelAll'
            },
            'commentpanel #cancelButton': {
                click:'cancelAll'
            }
        }
    },

    onPurchaseOrdersPanelRender:function(cmp){
        var me=this,
            map = new Ext.util.KeyMap({
                target: cmp.getEl(),
                key: Ext.event.Event.ESC,
                fn: function(){
                    me.cancelAll();
                }
            });
    },
    
    onFormFormsave: function(form, record, eventOptions) {
        this.saveCommentAfterForm();
    },

    onFormFormcancel: function(form, record, eventOptions) {
        this.getReferences().display.hide();
        this.getViewModel().set('record', false);
    },
    
    savePurchaseOrder:function(){
        var controller = this.getView().down('panel purchaseordersform');
        controller.savePurchaseOrder();
    },
    cancelPurchaseOrder:function(){
        var controller = this.getView().down('panel purchaseordersform');
        controller.cancelPurchaseOrder();
    },
    saveComment:function(){
        var controller = this.getView().down('panel commentpanel');
        controller.saveComment();
    },
    cancelComment:function(){
        var controller = this.getView().down('panel commentpanel');
        controller.cancelComment();
    },

    add: function(project) {
        var me = this,
            refs = me.getReferences(),
            formPanel = refs.form,
            form = formPanel.getForm(),
            newRecord = Ext.create('Erp.model.PurchaseOrder', {
                id: null,
                orderId: project.get('id'),
                number: null,
                creationDate:new Date(),
                netValue: 0,
                taxValue: 0,
                grossValue: 0,
                editorId: Erp.data.app.user.id,
                editorName: Erp.data.app.user.userName,
                pmId: Erp.data.app.user.id,
                pmName: Erp.data.app.user.userName
            }),
            vm = me.getViewModel();
        
        if(formPanel.isDirty()) {
            Ext.MessageBox.confirm('Ungespeicherte Änderungen', 'Sie haben aktuell ungespeicherte Änderungen, sollen diese verworfen werden?', function(btn){
                if(btn == 'yes'){
                    formPanel.reset();
                    me.add();
                }
            }, this);
            return;
        }

        // Clear form
        formPanel.reset();

        // Set record
        formPanel.loadRecord(newRecord);

        // Set title
        vm.set('title', 'PO hinzufügen');

        form.isValid();

        // show project form
        refs.display.show();

        //focus the project name
        //FIXME form.findField('name').focus();
    },


    onGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var me=this,
        	vm = me.getViewModel(),
            refs = me.getReferences();
        	projectPanelVm=Ext.ComponentQuery.query('#projectpanel')[0].getViewModel();
        
    	//check if the user is allowed to modefy the po
        if(!projectPanelVm.get('isPoAllowed')){
        	return;
        }
        
        vm.set('record', record);
        refs.form.loadRecord(record);
        // show project form
        refs.display.show();
    },

    exportXls1: function(button, e, eOpts) {
        var params = {},
            store = this.getStore('purchaseOrders'),
            proxy = store.getProxy();

        params[proxy.getFilterParam()] = proxy.encodeFilters(store.getFilters().items);
        params[proxy.getSortParam()] = proxy.encodeSorters(store.getSorters().items);
        window.open('erp/purchaseorder/excel?'+Ext.urlEncode(params));
    },

    reload: function(button, e, eOpts) {
        this.getStore('purchaseOrders').load();
        this.fireEvent('reloadpurchaseorders');
    },

    onBufferedStoreLoad: function(store, records, successful, eOpts) {
        var params = {},
            proxy = store.getProxy(),
            sumpanel = this.getReferences().sumpanel;

        params[proxy.getFilterParam()] = proxy.encodeFilters(store.getFilters().items);
        params[proxy.getSortParam()] = proxy.encodeSorters(store.getSorters().items);
        sumpanel.setHtml('');
        sumpanel.loader.load({params:params});
    },
    onRowModelSelectionChange: function(model, selected, eOpts) {
        this.getSelectedRowsSum(selected);
    },
    clearFilterAndSort:function(){
        var me = this,
            store = me.getStore('purchaseOrders'),
            filters = me.getView().down('gridpanel').filters,
            sorters = store.sorters;
        if(sorters.length != 0){
            sorters.clear();
        }
        sorters.add([{
            property:"orderId",
            direction:"DESC"
        }]);
        if(store.getFilters().length > 0){
          //reloading of the store is caused by clearFilter call
          filters.clearFilters();
        }
        else {
          store.reload();
        }
    },
    //this function is caled after the poForm is saved
    saveCommentAfterForm:function(){
        var me = this,
            panelview = this.getView().down('panel commentpanel'),
            vm=panelview.getViewModel(),
            record=vm.get('record');
        if(!record){
            return
        }
        me.saveComment();
        me.getViewModel().set('record', false);
        me.getReferences().display.hide();
        me.getStore('purchaseOrders').load();
        record.load();
    },
    //executed whenever we save comment or form
    saveAll:function(){
        this.savePurchaseOrder();
    },
    cancelAll:function(){
        var me=this;
        
        me.cancelPurchaseOrder();
        me.cancelComment();
        me.getReferences().display.hide();
        me.getViewModel().set('record', false);
    },
    getSelectedRowsSum:function(selected){
        var me = this,
            refs = me.getReferences(),
            sumpanelselected=refs.sumpanelselected,
            ids="",
            params={};
        sumpanelselected.setHtml('');
        if(selected.length <= 0){
            return;
        }
        for(var i=0;i<selected.length;i++){
            ids+=","+selected[i].id;
        }
        params["filter"]='[{"operator":"in","value":['+ids.substr(1)+'],"property":"id"}]';
        sumpanelselected.loader.load({params:params});
    }
});
