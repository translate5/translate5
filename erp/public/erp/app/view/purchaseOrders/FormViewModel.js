/*
 * File: app/view/purchaseOrders/FormViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.purchaseOrders.FormViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.purchaseordersform',

    requires: [
        'Ext.data.Store',
        'Ext.data.field.Integer',
        'Ext.data.proxy.Rest',
        'Ext.data.reader.Json',
        'Ext.app.bind.Formula'
    ],

    data: {
        billDate: false,
        paidDate: false,
        billReceivedDate: false,
        isCancelled: false,
        wasCancelled: false,
        vendor: {
            
        }
    },

    //fields with megaphone-pencil icon when they are dirty
    dirtryFieldsCheck:['pmId','deliveryDate',
                       'wordsCount','wordsDescription','perWordPrice',
                       'hoursCount','hoursDescription','perHourPrice',
                       'additionalCount','additionalDescription','additionalUnit','additionalPrice','perAdditionalUnitPrice',
                       'transmissionPath','additionalInfo',
                       'vendorId',
                       'netValue',
                       'originalNetValue'],

    stores: {
        pmusers: {
            autoLoad: true,
            pageSize:0,
            fields: [
                {
                    type: 'int',
                    name: 'id'
                },
                {
                    convert: function(v, rec) {
                        return rec.data.surName+', '+rec.data.firstName;
                    },
                    name: 'text'
                }
            ],
            proxy: {
                type: 'rest',
                url: 'erp/user/pm',
                reader: {
                    type: 'json',
                    rootProperty: 'rows'
                }
            }
        },
        vendors: {
            autoLoad: false,
            model: 'Erp.model.Vendor',
            proxy: {
                type: 'ajax',
                url: 'erp/vendor',
                reader: {
                    type: 'json',
                    rootProperty: 'rows'
                }
            }
        }
    },
    formulas: {
        taxValue: function(get) {
            return get('netValue') * (get('vendor.taxRate')/100);
        },
        grossValue: function(get) {
            return get('netValue') + get('taxValue');
        },
        originalTaxValue: function(get) {
            return get('originalNetValue') * (get('vendor.taxRate')/100);
        },
        originalGrossValue: function(get) {
            return get('originalNetValue') + get('originalTaxValue');
        },
        state: function(get) {
            if(get('isBlocked')){
                return 'blocked';
            }
            if(get('isCancelled')) {
                return 'cancelled';
            }
            if(get('paidDate')){
                return 'paid';
            }
            if(get('billDate')){
                return 'billed';
            }
            return 'created';
        },
        isPayable: function(get) {
            return get('billDate') && !get('isCancelled') && !get('isBlocked');
        },
        disableCancel: function(get) {
            return get('paidDate') || get('wasCancelled');
        },
        baseCurrency: function(get) {
            return Erp.data.app.baseCurrency;
        },
        originalNetValueDisabled: function(get) {
            return get('isCancelled') || !get('vendor.currency');
        },
        isPaied: function(get) {
            //since the optical effects are the same, isPaied is also set if isCancelled
            return !!get('paidDate') || get('isCancelled');
        },
        isPerLinePrice:function(get){
            return get('vendor') && get('vendor.Prices.PerLine')>0;
        },
        isBaseCurrency:function(get){
            return get('vendor.currency')==Erp.data.app.baseCurrencyText;
        }
    }

});