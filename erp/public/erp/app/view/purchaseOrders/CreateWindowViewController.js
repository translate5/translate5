/*
 * File: app/view/purchaseOrders/CreateWindowViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.purchaseOrders.CreateWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.purchaseorderscreatewindow',
    requires: ['Erp.view.Numberfieldcustom',
               'Erp.view.purchaseOrders.UpdateLanguagesWindow',
               'Erp.view.purchaseOrders.VendorPdf.VendorPdfWindow'],
    id: 'purchaseordercreatewindow',
    listen: {
        component: {
            'field': {
                change:'fieldChange'
            }
        },
        controller: {
            vendorpdfwindow:{
                savePdfClick:'onSavePdfClick'
            }
        },
        global:{
            resize:'onBrowserWindowResize'
        }
    },
    init: function() {
        var me=this,
            form = me.getReferences().form,
            vm = me.getViewModel(),
            project = me.getView().project,
            pSourceLang =project.get('sourceLang');

        form.loadRecord(Ext.create('Erp.model.PurchaseOrder', {
            id: null,
            orderId: project.get('id'),
            state: 'created',
            orderStatus:project.get('state'),
            sourceLang:pSourceLang,
            vendorId: null,
            number: null,
            creationDate:new Date(),
            netValue: 0,
            taxValue: 0,
            grossValue: 0,
            editorId: Erp.data.app.user.id,
            editorName: Erp.data.app.user.userName,
            pmId: Erp.data.app.user.id,
            pmName: Erp.data.app.user.userName
        }));
        
        vm.set('baseCurrency', Erp.data.app.baseCurrency);
        vm.set('orderName', project.get('name'));
        
        //if project target language is not provided, display the project source-target language picker
        if(pSourceLang==null || pSourceLang==""){
            var window = Ext.create('Erp.view.purchaseOrders.UpdateLanguagesWindow', {
                project:project,
                //this will be called after the form is submited
                callbackfunction:function(slng,tlng){
                    var rec = form.getRecord();
                    rec.set('sourceLang',slng);
                    rec.set('targetLang',tlng);
                    me.getView().addTargetLangStore(tlng);
                    me.afterProjectLanguagesUpdate();
                }
            });
            window.show();
        }

        form.getForm().isValid();
        me.callParent(arguments);
    },

    save: function(button, e, eOpts) {
        var me = this,
            vm=me.getViewModel(),
            formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            record = form.getRecord();

        // Valid
        if (!form.isValid()) {
            return;
        }

        me.cleanInvalidEntries();

        // Update associated record with values
        form.updateRecord();
        record.set('id', null);

        if(record.get('checked')) {
            record.set('checkerId', Erp.data.app.user.id);
        }

        //this record will be send to the pdf export window with extra vendor parametars (vendorObject)
        var vendorData=vm.get('vendors').getById(record.get('vendorId')).getData(),
            pdfWin = Ext.create('Erp.view.purchaseOrders.VendorPdf.VendorPdfWindow',{
                purchaseOrder:record,
                vendor:vendorData
            });
        pdfWin.show();
    },
    saveRecord:function(){
        var me=this,
            formPanel = me.getReferences().form,
            form = formPanel.getForm(),
            record=form.getRecord();
        
        if(!me.getView().isVisible(true)){
            return;
        }

        var vm=me.getViewModel(),
            project=me.getView().project,
            vendorData=vm.get('vendors').getById(record.get('vendorId')).getData();

        me.getView().setLoading();
        record.save({
            params:{
                vendor:Ext.util.JSON.encode(vendorData)
            },
            success: function(rec, operation) {
                var msg = 'PO mit Nummer "{0}-{1}" angelegt!';
                Erp.MessageBox.addSuccess(Ext.String.format(msg, this.get('orderId'), this.get('number')));
                //if project state is offered, we fire the 'purchaseordercreated' event after
                //updateProjectDates function is finished 
                //(because we need the reloading of the project after the changes in updateProjectDates are done)
                if(project.get('state')=='offered'){
                    me.updateProjectDates(project,form,function(){
                        //display info message if the project dates and status is changed
                        var msg = 'Projekt "{0}" wurde geändert!';
                        Erp.MessageBox.addSuccess(Ext.String.format(msg, project.get('id')));
                        me.fireEvent('purchaseordercreated', me.getView(), record);
                        me.getView().close();
                    });
                }else{
                    me.fireEvent('purchaseordercreated', me.getView(), record);
                    me.getView().close();
                }
                me.downloadFile(rec.get('id'),vendorData);
            },
            failure: Erp.app.getController('ServerException').invokeFormCallback(formPanel, function(){
                me.getView().setLoading(false);
            })
        });
    },
    //set the pointer to the first empty field
    focusOnFirstEmptyField:function(){
        var me=this,
            form = me.getReferences().form.getForm();
        Erp.Utils.focusOnFirstEmptyField(form);
    },

    cancelEdit: function(button, e, eOpts) {
        this.getView().close();
    },

    onFormAfterRender: function(component, eOpts) {
        var me=this;
        component.isValid();
        me.focusOnFirstEmptyField(component);
        Erp.Utils.setCalculatedWidth(component);
	},
    onFormBeforeRender:function(component,eOpts){
        var project = this.getView().project;
        if(project.get('state')=='offered'){
            this.createProjectDateFields(component);
        }
    },
    //
    onVendorChange: function(field, newValue, oldValue, eOpts) {
        if(!field.getEditable()){
            return;
        }
        var me=this,
            vendor = field.store.getById(newValue),
            vm=me.getViewModel();
        
        me.createOriginalNetValueField(field, newValue, oldValue, eOpts);

        if(vendor==null){
            vm.set('vendor',null);
            return;
        }
        me.setVendorData(vendor);
        vm.set('vendor',vendor);
        
        me.calculateNetValue();
        
        //if there is paymentTerm(loaded from PaymentDetails table) for this vendor
        //than apply the PaymentTerm value to to the paymentTerm dropdown in po form
        if(!vendor.get('paymentTerms') || !vendor.get('paymentTerms').data){
            return;
        }
        var form = me.getReferences().form,
            record = form.getRecord();
        record.set('paymentTerm',vendor.get('paymentTerms').data.PaymentTerm);//data.paymentTerms.data);
    },
    onTargetLangChange:function(field, newValue, oldValue, eOpts) {
        var me=this,
            vm=me.getViewModel(),
            project = me.getView().project,
            pSourceLang =project.get('sourceLang'),
            customerId = project.get('customerId');

        //if no record is found in store,don't send the request
        if(field.getStore().findRecord('value',newValue,0,false,true,true)==null){
            return;
        }
        //load vendor store with selected target language
        me.loadVendorStore(vm,pSourceLang,newValue,customerId);
    },
    onWordsCountChange:function(field, newValue, oldValue, eOpts) {
        var me = this;

        me.perWordPriceAutoFillUp(newValue);
         
        me.calculateNetValue();
        
        //set default value for wordsDEscription
        me.updateWordsDescriptionChange(field,newValue);
    },
    
    onHoursCountChange:function(field,newValue,oldValue){
        var me=this;
        me.perHourPriceAutoFillUp(newValue);
        me.calculateNetValue();
    },
    
    /***
     * Set/update the value of word description field
     */
    updateWordsDescriptionChange:function(field,newValue){
        var me = this,
            formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            wordsDescription=form.findField('wordsDescription'),
            wordsDescValue=wordsDescription.getValue(),
            project=me.getView().project,
            sourceLang =project.get('sourceLang'),
            targetLang =form.findField('targetLang').getRawValue(),
            wordsDescText="Übersetzung ";
        
        if(!targetLang){
            return;
        }
        
        //set default value for wordsDEscription
        if(wordsDescValue=='' && newValue!=null){
            if(sourceLang.toLowerCase()!="de-de"){
                wordsDescText="Translation ";
            }
            wordsDescription.setValue(wordsDescText + sourceLang+" / "+me.getLanguageNameById(targetLang,'targetLang'));
        }
        
        if(field.getValue()<1 ){
            wordsDescription.setValue(null);    
        }
    },
    
    onWordsDescriptionChange:function(field,newValue){
        this.perWordPriceAutoFillUp(newValue);
    },
    
    
    onHoursDescriptionChange:function(field,newValue){
        this.perHourPriceAutoFillUp(newValue);
    },
    
    perHourPriceAutoFillUp:function(newValue){
        var me = this,
            vm=me.getViewModel(),
            formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            perHourPrice =form.findField('perHourPrice'),
            vendor=vm.get('vendor');
        
        if(perHourPrice.getValue()==null && vendor.data && newValue!=null){
            perHourPrice.setValue(vendor.get('Prices').PerHour);
        }
    },
    
    perWordPriceAutoFillUp:function(newValue){
        var me = this,
            vm=me.getViewModel(),
            formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            perWordPrice =form.findField('perWordPrice'),
            vendor=vm.get('vendor');
        
        if(perWordPrice.getValue()==null && vendor.data && newValue!=null){
            perWordPrice.setValue(vendor.get('Prices').PerWord);
        }
    },
    
    onPerHourPriceChange:function(field,newValue){
        this.calculateNetValue();
    },
    
    
    onPerWordPriceChange:function(field,newValue){
        var me=this;
        me.calculateNetValue();
        me.updateWordsDescriptionChange(field,newValue);
    },
    
    onPerAdditionalUnitPriceChange:function(field,newValue){
        this.calculateAdditionalPrice();
        this.calculateNetValue();
    },
    
    onAdditionalCountChange:function(){
        this.calculateAdditionalPrice();
        this.calculateNetValue();
    },
    
    //resize window when the browser window is resized
    onBrowserWindowResize:function(){
        var me=this,
            window=me.getView();
        window.setWidth(Erp.Utils.calculateWidth());
    },

    onSavePdfClick:function(){
        this.saveRecord();
    },
    

    setVendorData:function(vendor){
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            record = form.getRecord();
        record.set('vendorId',vendor.get('id'));
        record.set('vendorName',vendor.get('text'));
        record.set('vendorNumber',vendor.get('number'));
        record.set('vendorCurrency',vendor.get('currency'));
        record.set('taxPercent',vendor.get('taxRate'));
    },

    fieldChange:function(field,isDirty,eOpts){
        field.up('form').isValid();
    },
    //create dynamically originalNetValue field if the currency for the vendor is provided 
    createOriginalNetValueField:function(field, newValue, oldValue, eOpts){
        var me=this,
            vm=me.getViewModel(),
            vendor = field.store.getById(newValue),
            data = vendor ? vendor.data : {},
            panel = field.up("form"),
            form =panel.getForm(),
            originalNetValue = form.findField("originalNetValue"),
            disableField= !data.currency || (data.currency == Erp.data.app.baseCurrencyText);
        vm.set('baseCurrency',Erp.data.app.baseCurrency);
        originalNetValue.setHidden(disableField);
        originalNetValue.setDisabled(disableField);
    },
    //insert the Freigabedatum and Gepl. Lieferdatum to the 'Projektdaten' fieldset
    createProjectDateFields:function(formpanel){
        var form=formpanel.getForm();
        var releaseDate=form.findField('releaseDate');
        var plannedDeliveryDate=form.findField('plannedDeliveryDate');
        releaseDate.setHidden(false);
        releaseDate.setDisabled(false);

        plannedDeliveryDate.setHidden(false);
        plannedDeliveryDate.setDisabled(false);
    },
    //update releaseDate and plannedDeliveryDate project dates, and
    //set the project status to 'ordered'()
    updateProjectDates:function(project,form,callbackfunction){
        var record=Ext.create('Erp.model.Project', {
            id:project.get('id'),
            customerId:project.get('customerId')
        }),
        releaseDate = form.findField('releaseDate'),
        plannedDeliveryDate = form.findField('plannedDeliveryDate');
        record.load({
            success: function(record, operation) {
                record.set('releaseDate',releaseDate.getValue());
                record.set('state','ordered');
                if(plannedDeliveryDate.getValue()!=null){
                    record.set('plannedDeliveryDate',plannedDeliveryDate.getValue());
                }
                record.save({
                    success:function(){
                        callbackfunction();
                    }
                });
            },
        });
    },
    //reload the project store after project source-target language are updated
    afterProjectLanguagesUpdate:function(){
        var me=this;
        me.fireEvent('reloadproject');
    },
    //load the custom vendros store (the vendors data is provided by tvin server)
    loadVendorStore:function(vm,source,target,customerId){
        if(!source || !target){
            return;
        }
        var me=this,
            form=me.getView().getReferences().form.form,
            vendorCombo=form.findField('vendorId'),
            store =me.getViewModel().getStore('vendors');
        
        store.load({
            params:{
                sourceLang:source,
                targetLang: target,
                customerId:customerId
            },
            callback: function(records, operation, success) {
                if(me.isDestroyed){
                    return;
                }
                vendorCombo.setEditable(true);
            }
        });
    },
    
    /***
     * Download the pdf file from the disk
     * @param id: the id of the po
     * @param vendor: json vendor data
     */
    downloadFile:function(id,vendor){
        //get only the needed vendor data, so the filename can be created
        var vendorData={
                FirstName:vendor['FirstName'],
                LastName:vendor['LastName'],
                IsCompany:vendor['IsCompany'],
                Company:vendor['Company']
            };
        location.href='erp/purchaseorder/'+id+'/download.pdf/'+JSON.stringify(vendorData)+'/vendor';
    },
    
    getLanguageNameById:function(value,fieldname){
        if(!value){
            return "";
        }
        var langStr = fieldname == 'sourceLang'? Erp.data.sourceLanguages :Erp.data.targetLanguages,
            retVal ="";

        langStr.forEach(function(element) {
            if(element.text==value){
                retVal =element.value;
                return false;
            }
        });
        return retVal;
    },
    
    calculateAdditionalPrice:function(){
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            additionalCount=parseFloat(form.findField('additionalCount').getValue()),
            perAdditionalUnitPrice=parseFloat(form.findField('perAdditionalUnitPrice').getValue()),
            additionalPrice=form.findField('additionalPrice');
        
        additionalPrice.setValue((additionalCount * perAdditionalUnitPrice));
    },
    
    calculateNetValue:function(){
        var me = this,
            formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            vm=me.getViewModel(),
            vendor=vm.get('vendor'),
            wordsCount=parseFloat(form.findField('wordsCount').getValue()),
            perWordPrice=parseFloat(form.findField('perWordPrice').getValue()),
            hoursCount=parseFloat(form.findField('hoursCount').getValue()),
            perHourPrice=parseFloat(form.findField('perHourPrice').getValue()),
            additionalPrice=parseFloat(form.findField('additionalPrice').getValue()),
            netValue=form.findField('netValue'),
            originalNetValue=form.findField('originalNetValue'),
            totalSum = 0,
            wordsFieldset =0,
            hoursFieldset=0;
        
        if(!vendor){
            return;
        }
        
        wordsFieldset=Erp.Utils.roundNumber(wordsCount*perWordPrice,2);
        hoursFieldset=Erp.Utils.roundNumber(hoursCount*perHourPrice,2);
        
        if(!isNaN(additionalPrice)){
            totalSum+=additionalPrice;
        }
        
        if(!isNaN(wordsFieldset)){
            totalSum+=wordsFieldset;
        }
        
        if(!isNaN(hoursFieldset)){
            totalSum+=hoursFieldset;
        }

        totalSum=Erp.Utils.roundNumber(totalSum,2);
        
        if(vendor.data && vendor.data.currency == Erp.data.app.baseCurrencyText){
            netValue.setValue(totalSum);
            return;
        }
        originalNetValue.setValue(totalSum);
    },
    /**
     * clean invalid form Entries
     */
    cleanInvalidEntries:function(){
        var me = this,
            formPanel = me.getReferences().form,
            form = formPanel.getForm(),
            wordsFieldset=['wordsCount','wordsDescription','perWordPrice'],
            hoursFieldset=['hoursCount','hoursDescription','perHourPrice'];
        
        var validFields = 0;
        //find the fieldset index
        wordsFieldset.forEach(function(element) {
            if(Erp.Utils.isFieldValid(element,form)){
                validFields++;
            }
        });

        //if there is only one valid field in fieldset, set set all values in the fieldset to null
        if(validFields < 2){
            wordsFieldset.forEach(function(element) {
                form.findField(element).setValue(null);
            });
        }
        validFields = 0;
        //find the fieldset index
        hoursFieldset.forEach(function(element) {
            if(Erp.Utils.isFieldValid(element,form)){
                validFields++;
            }
        });
        
        //if there is only one valid field in fieldset, set set all values in the fieldset to null
        if(validFields < 2){
            hoursFieldset.forEach(function(element) {
                form.findField(element).setValue(null);
            });
        }

    }
});
