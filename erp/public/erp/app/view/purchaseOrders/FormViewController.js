/*
 * File: app/view/purchaseOrders/FormViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.purchaseOrders.FormViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.purchaseordersform',

    id: 'purchaseorderform',
    listen: {
        component: {
            'field': {
                change:'fieldChange'
            }
        },
        controller: {
            vendorpdfwindow:{
                savePdfClick:'onSavePdfClick'
            }
        }
    },
    additionalModifiedPos:'',
    init: function() {
        var me=this;

        me.states = Erp.data.purchaseOrder.states;
        me.stateLabels = Erp.data.purchaseOrder.stateLabels;
        me.initDirtyClsFields();
        me.callParent(arguments);
    },

    onVendorChange: function(field, newValue, oldValue, eOpts) {
        var me=this,
        	form = me.getView().getForm(),
            record=me.getView().getRecord(),
            vm = me.getViewModel(),
            vendor =me.findVendor(newValue),
            data = vendor ? Ext.clone(vendor.data) : {paymentTerms: [],invoicesList:[]},
            otv = form.findField('originalTaxValue'),
            ogv = form.findField('originalGrossValue'),
            taxValue = form.findField('taxValue'),
            grossValue = form.findField('grossValue'),
            fieldVendorCurrency = form.findField('vendorCurrency'),
            fieldVendorTaxPercent = form.findField('taxPercent'),
            val =form.findField('netValue').value,
    		vmVendorNumber =typeof(vm.get('vendorNumber')) !== 'undefined' ? vm.get('vendorNumber'):-1,
            vmVendorCurrency =typeof(vm.get('vendorCurrency')) !== 'undefined' ? vm.get('vendorCurrency'):"",
            vmTaxPercent =typeof(vm.get('taxPercent')) !== 'undefined' ? vm.get('taxPercent'):0,
    		dataVendorNumber = data.number ? data.number : -1,
            dataCurrency = data.currency ? data.currency : "",
            vendorName = (vendor && vendor.get('text')) ? vendor.get('text') : null,
            paymentTerm = (vendor && vendor.get('paymentTerms')) ? vendor.get('paymentTerms') : null,
            dataTaxRate = data.taxRate ? data.taxRate : 0,
            isComboDirtyCustom = oldValue && (newValue!=oldValue) && (vmVendorNumber != newValue);

       vm.set('isCurrencyChanged', false);
       vm.set('isTaxPercentChanged', false);
       record.set('vendorName',vendorName);
       record.set('paymentTerm',paymentTerm);
       
       if(vmVendorNumber === dataVendorNumber){
           vm.set('isCurrencyChanged', vmVendorCurrency !== dataCurrency);
           vm.set('isTaxPercentChanged',vmTaxPercent !== dataTaxRate);
           fieldVendorCurrency.setValue(dataCurrency);
           fieldVendorTaxPercent.setValue(dataTaxRate);
       }else{
           fieldVendorCurrency.setValue(fieldVendorCurrency.getValue());
           fieldVendorTaxPercent.setValue(fieldVendorTaxPercent.getValue());
       }
       
       //force rebinding
       if(!data.currency){
           data.currency=null;
       }
       vm.set('vendor', data);
       //this here will trigger recalculation of the taxValue field
       vm.set('netValue', val);
       
       //when setValue function is used , the binding for this field will happen and the currency will be attached to the value string
       otv.setValue(otv.getValue());
       ogv.setValue(ogv.getValue());
       taxValue.setValue(taxValue.getValue());
       grossValue.setValue(grossValue.getValue());
       
       me.dirtyClsTooltip(field,isComboDirtyCustom,null);
       
       field.removeCls('changed-field-value');
       if(isComboDirtyCustom){
           field.addCls('changed-field-value')
       }
       
       field.select(vendor);
       
       //update the vendor prices
       me.updateVendorPrices(data,vmVendorNumber === dataVendorNumber);
       
       me.calculateNetValue(vmVendorNumber === dataVendorNumber);
    },

    onBilldateChange: function(field, newValue, oldValue, eOpts) {
        var me=this,
            form = this.getView().getForm(),
            vm = this.getViewModel();
        
        //setting of checkbox "geprüft"
        me.checkBoxCheckedState();
        if(field.isValid()){
            //set the bookingYear and bookingMonth fields from billDate
            me.setBookingYearAndMonth(form,newValue,field);
        }
        me.handleAllowBlankBillReceivedDateBillNumber(field.rawValue);
        if(!newValue && oldValue && vm.get('billDate')) {
            Ext.Msg.alert("Rechnungseingangsdatum Kreditoren ebenfalls entfernt!", "Durch das Entfernen des Rechnungsdatums wurde das Rechnungseingangsdatum ebenfalls entfernt.");
            form.findField('billReceivedDate').setValue(null);
        }
    },
    onBillReceiveChange: function(field, newValue, oldValue, eOpts) {
        var vm = this.getViewModel();
        
        //setting of checkbox "geprüft"
        this.checkBoxCheckedState();
        
        if(!newValue && oldValue && vm.get('billDate')) {
            Ext.Msg.alert("Rechnungsdatum Kreditoren ebenfalls entfernt!", "Durch das Entfernen des Rechnungseingangsdatum wurde das Rechnungsdatum ebenfalls entfernt.");
            vm.set('billDate', null);
        }
    },
    onBillReceiveWriteableChange:function(field,readOnly,eOpts){
        if(readOnly){
            this.cleanAllowBlankBillReceivedDateBillNumber();
        }
    },
    onPaiddateChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
            me.setSameDatePoIds("");
        if((field.isValid() && me.customDateValidation(field.rawValue))){
            me.getViewModel().set('paidDate', field.rawValue==""?null:newValue);
            me.getView().getForm().findField('paidDate').setValue(field.rawValue==""?null:newValue);
            me.setPaiedDateForAll(field);
            me.handleAllowBlankBillReceivedDateBillNumberOnPaidDateChange();
        }
    },
    onStornoChange: function(field, newValue, oldValue, eOpts) {
        var vm = this.getViewModel();
        if(newValue) {
            vm.set('netValue', 0);
            vm.set('originalNetValue', 0);
        }
    },

    onCheckedChange: function(field, newValue, oldValue, eOpts) {
        var form = this.getView().getForm(),
            checker = form.findField('checkerName');

        if(newValue) {
            checker.setValue(Erp.data.app.user.userName);
        }
        else {
            checker.setValue('');
        }
    },
    onBlockedChange:function(field, newValue, oldValue, eOpts){
        var me=this,
            form = this.getView().getForm(),
            paidDate = form.findField('paidDate'),
            paymentBlockValue=form.findField('paymentBlockValue'),
            vm=me.getViewModel(),
            isBlocked=vm.get('isBlocked');
        
        paidDate.setDisabled(newValue);
        //using paymentBlockValue on backend we change change the blocked comment text
        if(isBlocked && !newValue){
            paymentBlockValue.setValue("unblock");
        }
        if(!isBlocked && newValue){
            paymentBlockValue.setValue("block");
        }
    },
    onSavePdfClick:function(){
        var me=this,
        	form = me.getView().getForm(),
            vm=me.getViewModel(),
            record = me.getView().getRecord();

        if(!me.getView().isVisible(true)){
            return;   
        }
        
        var df = me.getDirtyConditionalFields(vm,form),
        dfstr = '';
        if(df.length>0){
            dfstr=df.join(',');
        }
        
        var vendorData=me.findVendor(record.get('vendorNumber')).getData(),
            dirtyFields = me.getDirtyConditionalFields(vm,form),
            extraParams = {
                vendor:Ext.util.JSON.encode(vendorData),
                sendMail:true,
                dirtyFields:dfstr
            };
        me.saveRecord(true,extraParams);
    },

    fieldChange:function(field,isDirty,eOpts){
        field.up('form').isValid();
    },

    save: function(button, e, eOpts) {
        var me = this,
            form = this.getView(),
            record = form.getRecord();

        // Valid
        if (!form.isValid()) {
            return;
        }
        
        me.cleanInvalidEntries();

        me.updateDisabledFields();
        
        // Update associated record with values
        form.updateRecord();

        if(record.get('checked')) {
            record.set('checkerId', Erp.data.app.user.id);
        }
        
        
        //save record and sand mail
        me.sendMailAndSave(record,form)
    },
    
    onWordsCountChange:function(field, newValue, oldValue, eOpts) {
        var me = this;
        
        me.perWordPriceAutoFillUp(newValue);
        
        me.calculateNetValue();
        
        //set default value for wordsDEscription
        me.updateWordsDescriptionChange(field,newValue);
    },
    
    /***
     * Set/update the value of word description field
     */
    updateWordsDescriptionChange:function(field,newValue){
        var me = this,
            form = me.getView().getForm(),
            wordsDescription=form.findField('wordsDescription'),
            wordsDescValue=wordsDescription.getValue(),
            sourceLang =form.findField('sourceLang').getRawValue(),
            targetLang =form.findField('targetLang').getRawValue(),
            wordsDescText="Übersetzung ";
        
        if(!targetLang){
            return;
        }
        
        //set default value for wordsDEscription
        if(wordsDescValue=='' && newValue!=null){
            if(sourceLang.toLowerCase()!="de-de"){
                wordsDescText="Translation ";
            }
            wordsDescription.setValue(wordsDescText + sourceLang+" / "+targetLang);
        }
        
        if(field.getValue()<1 ){
            wordsDescription.setValue(null);
        }
    },
    
    onWordsDescriptionChange:function(field, newValue, oldValue, eOpts) {
        this.perWordPriceAutoFillUp(newValue);
    },

    onPerWordPriceChange:function(field,newValue,oldValue,eOpts){
        var me=this,
            form=me.getView().getForm(),
            wordsCount=form.findField('wordsCount').getValue(),
            wordsDescription=form.findField('wordsDescription').getValue();
        
        if(!wordsCount && !wordsDescription && newValue < 0){
            field.setValue(null);
        }
        me.calculateNetValue();
        me.updateWordsDescriptionChange(field,newValue);
    },
    
    onHoursCountChange:function(field,newValue,oldValue,eOpts){
        this.calculateNetValue();
        this.perHourPriceAutoFillUp(newValue);
    },
    
    onHoursDescriptionChange:function(field,newValue,oldValue,eOpts){
        this.perHourPriceAutoFillUp(newValue);
    },
    onPerHourPriceChange:function(field,newValue,oldValue,eOpts){
        var me=this,
            form=me.getView().getForm(),
            hoursCount=form.findField('hoursCount').getValue(),
            hoursDescription=form.findField('hoursDescription').getValue();
        
        if(!hoursCount && !hoursDescription && newValue < 1){
            field.setValue(null);
        }
        this.calculateNetValue();
    },
    
    onAdditionalCountChange:function(){
        this.calculateAdditionalPrice();
        this.calculateNetValue();
    },
    
    onPerAdditionalUnitPriceChange:function(){
        this.calculateAdditionalPrice();
        this.calculateNetValue();
    },
    
    /**
     * Save the record and if some of the required fields are changed then also send mail to the vendor with the updated values
     */
    sendMailAndSave:function(record,view){
        var me=this,
            vm=me.getViewModel(),
            form=view.getForm();
        
        if(me.isSendVendor(vm,form)){
            //this record will be send to the pdf export window with extra vendor parametars (vendorObject)
            var vendorData=me.findVendor(record.get('vendorNumber')).getData(),
                pdfWin = Ext.create('Erp.view.purchaseOrders.VendorPdf.VendorPdfWindow',{
                    purchaseOrder:record,
                    vendor:vendorData,
                    dirtyFields:me.getDirtyConditionalFields(vm,form)
                });
            pdfWin.show();
            return;
        }

        me.saveRecord();
    },

    /***
     * Save the record
     * 
     * sendMail -> boolean (if true mail(with pdf attachment) with the updated po values will be sended to the vendor)
     * extraParams -> object (extra parametars to the request)
     */
    saveRecord:function(sendMail,extraParams){
        var me = this,
            view = me.getView(),
            record = view.getRecord();
        
        me.getView().setLoading();
        
        record.save({
            params:extraParams,
            success:function(rec, operation){
                var msg = 'Änderungen an PO mit Nummer <br/>{0} gespeichert!';
                if(!me.additionalModifiedPos){
                    me.additionalModifiedPos =record.get('orderId')+'-'+record.get('number');
                }
                if(me.additionalModifiedPos!='' && Ext.util.Format.substr(me.additionalModifiedPos,0,1)==','){
                    me.additionalModifiedPos =Ext.util.Format.substr(me.additionalModifiedPos,1,me.additionalModifiedPos.length);
                }
                Erp.MessageBox.addSuccess(Ext.String.format(msg,me.additionalModifiedPos));
                view.reset();
                me.fireEvent('formsave', view, record);
                
                if(sendMail){
                    me.downloadFile(rec.get('id'),extraParams['vendor']);
                }

                me.getView().setLoading(false);
            },
            failure:Erp.app.getController('ServerException').invokeFormCallback(view)
        });
    },

    cancelEdit: function(button, e, eOpts) {
        var form = this.getView(),
            vm = this.getViewModel();

        // Clear form
        form.reset();
        vm.set('record', false);
    },
    
    onBillNumberChange:function(field, newValue, oldValue, eOpts){
        //setting of checkbox "geprüft"
        this.checkBoxCheckedState();
    },
    onBillNumberWriteableChange:function(field,readOnly,eOpts){
        if(readOnly){
            this.cleanAllowBlankBillReceivedDateBillNumber();
        }
    },
    
    //setting of checkbox "geprüft"
    checkBoxCheckedState:function(){
        var form = this.getView().getForm(),
            billDate=form.findField('billDate'),
            billReceivedDate=form.findField('billReceivedDate'),
            billNumber=form.findField('billNumber'),
            checker = form.findField('checkerName'),
            cbGepruft = form.findField('checked');
        
        if(billDate.value && billReceivedDate.value && billNumber.value){
            checker.setValue(Erp.data.app.user.userName);
            cbGepruft.setValue(true);
        }else{
            checker.setValue('');
            cbGepruft.setValue(false);
        }
    },
    
    setPaiedDateForAll:function(datefield){
        var me=this,
            msg = 'Sollen die nachfolgenden POs ebenfalls auf dieses "Bezahlt am" Datum gesetzt werden: <br/>',
            resp = '',
            helpMsg=[],
            poIds=[],
            form=me.getView().getForm(),
            record = form.getRecord(),
            currentPoId=record.getId(),
            currentPoNumber=record.get('number'),
            currentPoOrderId=record.get('orderId'),
            billDateValue=form.findField("billDate").getValue(),
            billReceivedDateValue=form.findField("billReceivedDate").getValue(),
            billNumber=form.findField('billNumber').getValue(),
            vendorId=form.findField('vendorId').getValue(),
            //only those POs should be considred for this request, where the following fields have the same value as the current PO
            //Rechnungsnummer Vendor
            //Rechnungsdatum Kreditorren
            //Rechnungseingang Kreditoren
            filterStr='[{"operator":"eq","value":"'+billNumber+'","property":"billNumber"},'+
                       '{"operator":"eq","value":"'+vendorId+'","property":"vendorNumber"},'+
                       '{"operator":"eq","value":"'+(billDateValue!=null?Ext.Date.format(billDateValue,'Y-m-d'):null)+'","property":"billDate"},'+//2016-12-23 00:00:00
                       '{"operator":"eq","value":"'+(billReceivedDateValue?Ext.Date.format(billReceivedDateValue,'Y-m-d'):null)+'","property":"billReceivedDate"}]';

        datefield.setLoading({msg: "Laden.."});
        me.additionalModifiedPos='';

        Ext.Ajax.request({
            url:'erp/purchaseorder',
                method: "GET",
                params: {
                    filter:filterStr
                },
                success: function(response){
                    datefield.setLoading(false);
                    resp = Ext.util.JSON.decode(response.responseText);
                    if(!resp && resp.rows.length < 1){
                        return
                    }
                    for(var i=0;i<resp.rows.length;i++){
                        var poobject=resp.rows[i];
                        //do not show the po with same id as the loaded po in the form
                        if(currentPoId == poobject.id){
                            continue;
                        }
                        helpMsg.push(poobject.orderId+'-'+poobject.number);
                        poIds.push(poobject.id);
                    }
                    if(poIds=="" || helpMsg==""){
                        return;
                    }
                    Ext.Msg.confirm('Bestätigen', msg + helpMsg.join(', '), function(btn){
                        if(btn=='yes'){
                            me.additionalModifiedPos=(currentPoOrderId+'-'+currentPoNumber+', '+helpMsg.join(', '));
                            me.setSameDatePoIds(poIds.join(','));
                        }
                    });
                }, 
                failure: function(response){
                    datefield.setLoading(false);
                }
        });
    },
    //this function is used on datefields on change events,
    //and it will return true only if the value of the datefield contains valid date string
    customDateValidation:function(rawValue){
        if(!rawValue){
            return false;
        }
        var vals= rawValue.split('.');
        if(vals.length>2 && vals[0]!="" && vals[0].length>0 && vals[1]!="" && vals[1].length>0 && vals[2]!="" && vals[2].length>3){
            return true;
        }  
        return false;
    },
    setSameDatePoIds:function(value){
        var me=this,
        form=me.getView().getForm(),
        sameDatePoIds=form.findField('sameDatePoIds');
        sameDatePoIds.setValue(value);
    },
    //set the bookingYear and bookingMonth fields from billDate
    setBookingYearAndMonth:function(form,value,billDate){
        var bookingYear=form.findField('bookingYear'),
            bookingMonth=form.findField('bookingMonth');
        if(value===null){
            bookingYear.setValue(null);
            bookingMonth.setValue(null);
            return;
        }
        bookingYear.setValue(value.getFullYear());
        bookingMonth.setValue(value.getMonth());
    },
    //add or clean alloBlank property form the fields depending if there is a valid billDate value
    handleAllowBlankBillReceivedDateBillNumber:function(rawValue){
        var me=this,
            form=me.getView().getForm(),
            billReceivedDate=form.findField('billReceivedDate'),
            billNumber=form.findField('billNumber');
        if(me.customDateValidation(rawValue)){
            billReceivedDate.allowBlank = false;
            billReceivedDate.validateValue(billReceivedDate.getValue()); //force update
            billNumber.allowBlank = false;
            billNumber.validateValue(billNumber.getValue()); //force update
        }else{
            billReceivedDate.allowBlank =true;
            billReceivedDate.clearInvalid(); //force update
            billNumber.allowBlank = true;
            billNumber.clearInvalid(); //force update
        }
    },
    //clean alloBlank property form the fields
    cleanAllowBlankBillReceivedDateBillNumber:function(){
        var me=this,
            form=me.getView().getForm(),
            billReceivedDate=form.findField('billReceivedDate'),
            billNumber=form.findField('billNumber');
            billReceivedDate.allowBlank = true;
            billReceivedDate.clearInvalid(); //force update
            billNumber.allowBlank = true;
            billNumber.clearInvalid(); //force update
    },
    //handels allow blank if paidDate is changed
    handleAllowBlankBillReceivedDateBillNumberOnPaidDateChange:function(){
        var me=this,
            form=me.getView().getForm(),
            billReceivedDate=form.findField('billReceivedDate'),
            billNumber=form.findField('billNumber'),
            billDate=form.findField('billDate');
        //if we have a valid date('dd.mm.yyyy'),then we set the two fields to mandatory
        //because there is no setter method for allowBlank , this is the way how we do it
        //(setting it by hand and after that call the validateValue method) 
        if(me.customDateValidation(billDate.rawValue)){
            billReceivedDate.allowBlank = false;
            billReceivedDate.validateValue(billReceivedDate.getValue()); //force update
            billNumber.allowBlank = false;
            billNumber.validateValue(billNumber.getValue()); //force update
        }
    },
    /***
     * Check if one of the conditional fields for sending mail to vendor is changed (dirty)
     */
    isSendVendor:function(vm,form){
        var fieldNames=vm.dirtryFieldsCheck,
            retval=false,
	        rec=form.getRecord();
	
        //do not send to a vendor if it is old po. see TMUE-188
        if(rec && Erp.Utils.isDisableValidation(rec.get('creationDate'))){
        	return false;
        	
        }
	    
        fieldNames.forEach(function(fieldName) {
            if(form.findField(fieldName).hasCls('changed-field-value')){
                retval=true;
                return true;
            }
        });

        return retval;
    },
    /***
     * Download the pdf file from the disk
     * @param id: the id of the po
     * @param vendor: json vendor data
     */
    downloadFile:function(id,vendor){
        //get only the needed vendor data, so the filename can be created
        vendor=JSON.parse(vendor);
        var vendorData={
            FirstName:vendor['FirstName'],
            LastName:vendor['LastName'],
            IsCompany:vendor['IsCompany'],
            Company:vendor['Company']
        };
        location.href='erp/purchaseorder/'+id+'/download.pdf/'+JSON.stringify(vendorData)+'/vendor';
    },

    /**
     * Add dirtyCls class to the fields
     */
    initDirtyClsFields:function(){
        var me=this,
            form=me.getView().getForm(),
            fieldNames=me.getViewModel().dirtryFieldsCheck;
        fieldNames.forEach(function(fieldName) {
            if(fieldName == 'vendorId'){
                return;
            }
            var field =form.findField(fieldName);
            field.dirtyCls='changed-field-value';
            field.on('dirtychange',me.dirtyClsTooltip);
        });
    },
    /***
     * Add or remove tooltip from the field depending on if the field is dirty or not
     */
    dirtyClsTooltip:function(field,isDirty,eOpts){
        if(!isDirty){
            Ext.QuickTips.unregister(field.getEl());
            return;
        }
        Ext.QuickTips.register({
            target: field.getEl(),
            text: 'Sobald dieser geänderte Wert gespeichert ist, verschickt translate5 business einen veränderten PO an den Vendor.',
            autoShow:true
        });
    },
    getLanguageNameById:function(value,fieldname){
        if(!value){
            return "";
        }
        var langStr = fieldname == 'sourceLang'? Erp.data.sourceLanguages :Erp.data.targetLanguages,
            retVal ="";

        langStr.forEach(function(element) {
            if(element.value==value){
                retVal =element.text;
                return false;
            }
        });
        return retVal;
    },
    /***
     * Check if some of the conditional fields(fields with if they are dirty we send an mail to vendor and pm) is dirty
     */
    getDirtyConditionalFields:function(vm,form){
        var fieldNames=vm.dirtryFieldsCheck,
            dirtyfields=[];
        
        fieldNames.forEach(function(fieldName) {
            var field = form.findField(fieldName);
            if(field.hasCls('changed-field-value') && field.isDirty()){
                dirtyfields.push(fieldName);
            }
        });
        return dirtyfields;
    },
    
    /***
     * Calculate the additionalPrice field (Zusatzposition Bestellpreis)
     */
    calculateAdditionalPrice:function(){
        var me = this,
            form=me.getView().getForm(),
            additionalCount=parseFloat(form.findField('additionalCount').getValue()),
            perAdditionalUnitPrice=parseFloat(form.findField('perAdditionalUnitPrice').getValue()),
            additionalPrice=form.findField('additionalPrice');
        
        additionalPrice.setValue((additionalCount * perAdditionalUnitPrice));
    },
    
    /***
     * Calculate the netValue field
     */
    calculateNetValue:function(applayOldValues){
        var me = this,
            vm=me.getViewModel(),
            vendor=vm.get('vendor'),
            form=me.getView().getForm(),
            wordsCount=parseFloat(form.findField('wordsCount').getValue()),
            perWordPrice=parseFloat(form.findField('perWordPrice').getValue()),
            hoursCount=parseFloat(form.findField('hoursCount').getValue()),
            perHourPrice=parseFloat(form.findField('perHourPrice').getValue()),
            additionalPrice=parseFloat(form.findField('additionalPrice').getValue()),
            netValue=form.findField('netValue'),
            originalNetValue=form.findField('originalNetValue'),
            totalSum = 0,
            wordsFieldset =0,
            hoursFieldset=0;
        
        
        wordsFieldset=Erp.Utils.roundNumber(wordsCount*perWordPrice,2);
        hoursFieldset=Erp.Utils.roundNumber(hoursCount*perHourPrice,2);
        
        if(!isNaN(additionalPrice)){
            totalSum+=additionalPrice;
        }
        
        if(!isNaN(wordsFieldset)){
            totalSum+=wordsFieldset;
        }
        
        if(!isNaN(hoursFieldset)){
            totalSum+=hoursFieldset;
        }
        
        totalSum=Erp.Utils.roundNumber(totalSum,2);

        if(vendor && vendor.currency == Erp.data.app.baseCurrencyText){
            netValue.setValue(totalSum);
            if(applayOldValues){
                originalNetValue.setValue(me.getView().getRecord().get('originalNetValue'));
            }
            return;
        }
        if(applayOldValues){
            netValue.setValue(me.getView().getRecord().get('netValue'));
        }
        if(originalNetValue.isDisabled()){
            originalNetValue.setDisabled(!originalNetValue.isDisabled())
        }
        originalNetValue.setValue(totalSum);
        
    },
    
    /***
     *  Update the vendor prices when the vendor is changed.
     *  If the the selected vendor is the same as the initially loaded one, 
     *  than we apply the initial values from the record.
     * 
     *  @param vendorData : the vendor data
     *  @param applayOldValues: if true, the initially loaded values will be aplied, otherwise the new values
     */
    updateVendorPrices:function(vendorData,applayOldValues){
        if(!vendorData || !vendorData.Prices){
            return;
        }
        
        var me=this,
            form=me.getView().getForm(),
            perWordPrice=form.findField('perWordPrice'),
            perHourPrice=form.findField('perHourPrice'),
            record = me.getView().getRecord(),
            pw,ph;
        
        if(applayOldValues){
            pw = record.get('perWordPrice');
            ph = record.get('perHourPrice');
        }else{
            pw = vendorData.Prices.PerWord;
            ph = vendorData.Prices.PerHour;
        }
        
        perWordPrice.setValue(pw);
        perHourPrice.setValue(ph);
    },
    
    perHourPriceAutoFillUp:function(newValue){
        var me = this,
            vm=me.getViewModel(),
            form=me.getView().getForm(),
            perHourPrice =form.findField('perHourPrice'),
            hoursCount=form.findField('hoursCount').getValue(),
            hoursDescription=form.findField('hoursDescription').getValue(),
            vendor=vm.get('vendor');
        
        if(perHourPrice.getValue()==null && vendor!=null && newValue!=null && (hoursCount || hoursDescription)){
            perHourPrice.setValue(vendor.Prices.PerHour);
        }
    },
    
    perWordPriceAutoFillUp:function(newValue){
        var me = this,
            vm=me.getViewModel(),
            form=me.getView().getForm(),
            perWordPrice =form.findField('perWordPrice'),
            wordsCount=form.findField('wordsCount').getValue(),
            wordsDescription=form.findField('wordsDescription').getValue(),
            vendor=vm.get('vendor');
        
        if(perWordPrice.getValue()==null && vendor!=null && newValue!=null && (wordsCount || wordsDescription)){
            perWordPrice.setValue(vendor.Prices.PerWord);
        }
    },
    
    /***
     * Set the form record values to 0 for the 'Vendorwährung' fields, if the 'in Vendorwährung' fieldset is disabled
     */
    updateDisabledFields:function(){
        var me=this,
            form=me.getView().getForm(),
            originalNetValue=form.findField('originalNetValue'),
            originalTaxValue=form.findField('originalTaxValue'),
            originalGrossValue=form.findField('originalGrossValue'),
            record = me.getView().getRecord();
        
        if(originalNetValue.isDisabled()){
            record.set('originalNetValue',null);
        }
        if(originalTaxValue.isDisabled()){
            record.set('originalTaxValue',null);
        }
        if(originalGrossValue.isDisabled()){
            record.set('originalGrossValue',null);
        }
    },

        /**
     * clean invalid form Entries
     */
    cleanInvalidEntries:function(){
        var me = this,
            form=me.getView().getForm(),
            wordsFieldset=['wordsCount','wordsDescription','perWordPrice'],
            hoursFieldset=['hoursCount','hoursDescription','perHourPrice'];
        
        var validFields = 0;
        //find the fieldset index
        wordsFieldset.forEach(function(element) {
            if(Erp.Utils.isFieldValid(element,form)){
                validFields++;
            }
        });

        //if there is only one valid field in fieldset, set set all values in the fieldset to null
        if(validFields < 2){
            wordsFieldset.forEach(function(element) {
                form.findField(element).setValue(null);
            });
        }
        validFields = 0;
        //find the fieldset index
        hoursFieldset.forEach(function(element) {
            if(Erp.Utils.isFieldValid(element,form)){
                validFields++;
            }
        });
        
        //if there is only one valid field in fieldset, set set all values in the fieldset to null
        if(validFields < 2){
            hoursFieldset.forEach(function(element) {
                form.findField(element).setValue(null);
            });
        }

    },
    
    /***
     * Find vendor by vendorNumber in the view model store 
     */
    findVendor:function(vendorNumber){
    	var me=this,
        	vm = me.getViewModel();
    	
        return vm.get('vendors').findRecord('number',vendorNumber,0,false,true,true);
    }
});
