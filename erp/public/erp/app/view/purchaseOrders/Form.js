/*
 * File: app/view/purchaseOrders/Form.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Erp.view.purchaseOrders.Form', {
    extend: 'Ext.form.Panel',
    alias: 'widget.purchaseordersform',

    requires: [
        'Erp.view.purchaseOrders.FormViewModel',
        'Erp.view.purchaseOrders.FormViewController',
        'Ext.form.FieldSet',
        'Ext.form.field.Display',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Ext.form.field.Date',
        'Ext.form.field.Checkbox',
        'Ext.button.Button',
        'Erp.view.Numberfieldcustom',
        'Ext.form.field.Number'
    ],
    mixins: ['Erp.view.purchaseOrders.FormFields'],

    controller: 'purchaseordersform',
    viewModel: {
        type: 'purchaseordersform'
    },
    reference: 'form',
    scrollable: true,
    bodyPadding: 10,
    title: 'PO bearbeiten',
    fieldDefaults: {
        anchor: '100%'
    },
    trackResetOnLoad: true,
    defaultButton: 'saveButton',
    referenceHolder: true,
    enableKeyEvents: true,
    cls:'x-selectable',//selectable display fields
    initConfig: function (instanceConfig) {
        var me = this,
            config = {
            items: [
                {
                    xtype: 'container',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'fieldset',
                            flex: 0.5,
                            title: 'PO Daten',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    //items 1
                                    xtype:'container',
                                    defaults: {
                                        width: '90%'
                                    },
                                    flex: 1,
                                    items:[
                                        me.getPurchaseOrdersFieldConfig('orderId'),
                                        me.getPurchaseOrdersFieldConfig('number'),
                                        {
                                            xtype: 'displayfield',
                                            fieldLabel: 'Kunde',
                                            name: 'customerName'
                                        },
                                        {
                                            xtype: 'combobox',
                                            fieldLabel: 'PM',
                                            name: 'pmId',
                                            readOnlyCls: 'x-form-readonly x-item-disabled',
                                            allowBlank: false,
                                            autoLoadOnValue: true,
                                            forceSelection: true,
                                            valueField: 'id',
                                            bind: {
                                                readOnly: '{isCancelled}',
                                                store: '{pmusers}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            fieldLabel: 'Quellsprache',
                                            name: 'sourceLang',
                                			renderer:me.languageRenderer
                                        },
                                        {
                                            xtype: 'displayfield',
                                            fieldLabel: 'Zielsprache',
                                            name: 'targetLang',
                                			renderer:me.languageRenderer
                                        },
                                        {
                                            xtype: 'displayfield',
                                            renderer: function(value, displayField) {
                                                if(!value) {
                                                    return "";
                                                }
                                                var s = this.lookupController().stateLabels;
                                                if(!s[value]) {
                                                    Ext.log({msg:'Status label not found: '+value, level: 'error'});
                                                    return 'Unbekannter Status';
                                                }
                                                return s[value];
                                            },
                                            fieldLabel: 'Status',
                                            name: 'state',
                                            bind: {
                                                value: '{state}'
                                            }
                                        },{
                                            xtype: 'displayfield',
                                            renderer: function(value, displayField) {
                                                if(!value) {
                                                    return "";
                                                }
                                                var s = Erp.data.project.stateLabels;
                                                if(!s[value]) {
                                                    Ext.log({msg:'Status label not found: '+value, level: 'error'});
                                                    return 'Unbekannter Status';
                                                }
                                                return s[value];
                                            },
                                            fieldLabel: 'Auftragsstatus',
                                            name: 'orderStatus',
                                            bind: {
                                                value: '{orderStatus}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            renderer: function(value, displayField) {
                                                return Ext.Date.format(value, Ext.Date.defaultFormat);
                                            },
                                            fieldLabel: 'Datum PO erstellt',
                                            name: 'creationDate'
                                        },
                                        me.getPurchaseOrdersFieldConfig('deliveryDate',{
                                            readOnlyCls: 'x-form-readonly x-item-disabled'
                                        })
                                    ]
                                },
                                {
                                    //items 2
                                    xtype:'container',
                                    defaults: {
                                        width: '100%'
                                    },
                                    flex: 1,
                                    items:[
                                        me.getPurchaseOrdersFieldConfig('wordsCount',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('perWordPrice',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('wordsDescription',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('hoursCount',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('perHourPrice',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('hoursDescription',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('additionalCount',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('additionalDescription',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('additionalUnit',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('perAdditionalUnitPrice',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('additionalPrice',{
                                            //additional config
                                            validator:function (value) {
                                                return Erp.Utils.customValidation(this.getName(),me.getForm());
                                            }
                                        }),
                                        me.getPurchaseOrdersFieldConfig('transmissionPath'),
                                        me.getPurchaseOrdersFieldConfig('additionalInfo',{
                                            height:150
                                        })
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            flex: 0.3,
                            title: 'Vendor',
                            defaults:{
                                width:'100%',
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Name / Firma',
                                    name: 'vendorId',
                                    readOnlyCls: 'x-form-readonly x-item-disabled',
                                    allowBlank: false,
                                    anyMatch: true,
                                    autoLoadOnValue: true,
                                    forceSelection: true,
                                    queryMode: 'local',
                                    valueField: 'number',
                                    displayField:'text',
                                    bind: {
                                        readOnly: '{isCancelled}',
                                        store: '{vendors}'
                                    },
                                    listeners: {
                                        change: 'onVendorChange'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    fieldLabel: 'Vendor Nr.',
                                    name: 'vendorNumber',
                                    bind: {
                                        value: '{vendor.number}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    fieldLabel: 'Währung',
                                    name: 'vendorCurrency',
                                    renderer: function(value, displayField) {
                                        var vm = displayField.up('panel').getViewModel(),
                                            isCurrencyChanged=vm.get('isCurrencyChanged'),
                                            vmVendorCurrency = "",
                                            retval = value;
                                        if(isCurrencyChanged){
                                            vmVendorCurrency =typeof(vm.get('vendorCurrency')) !== 'undefined' ? vm.get('vendorCurrency'):"";
                                            retval = value+" (alter Wert: "+vmVendorCurrency+")";
                                        }
                                        if(displayField.inputEl){
                                            displayField.inputEl.setStyle({
                                                color: isCurrencyChanged ?"red":""
                                            });
                                        }
                                        return retval;
                                    },
                                    bind: {
                                        value: '{vendor.currency}',
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    name: 'taxPercent',
                                    renderer: function(value, displayField) {
                                        var vm = displayField.up('panel').getViewModel(),
                                            isTaxPercentChanged=vm.get('isTaxPercentChanged'),
                                            vmVendorText = "",
                                            retval = Ext.util.Format.number(value, '0,000.00 %');
                                        if(isTaxPercentChanged){
                                            vmVendorText =typeof(vm.get('taxPercent')) !== 'undefined' ? vm.get('taxPercent'):"";
                                            retval =  Ext.util.Format.number(value, '0,000.00 %')+" (alter Wert: "+Ext.util.Format.number(vmVendorText, '0,000.00 %')+")";
                                        }
                                        if(displayField.inputEl){
                                            displayField.inputEl.setStyle({
                                                color: isTaxPercentChanged ?"red":""
                                            });
                                        }
                                        return retval;
                                    },
                                    fieldLabel: 'Steuersatz',
                                    bind: {
                                        value: '{vendor.taxRate}'
                                    }
                                },{
                                    xtype: 'displayfield',
                                    name:'perLinePrice',
                                    fieldLabel: 'Zeilenpreis',
                                    renderer:function(value,displayField){
                                        var vm = displayField.up('panel').getViewModel();
                                            currency =vm.get('vendor.currency');
                                        return Erp.Utils.currency(value,currency);
                                    },
                                    bind:{
                                        value: '{vendor.Prices.PerLine}',
                                        visible:'{isPerLinePrice}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            flex: 0.25,
                            title: 'Rechnungswert',
                            defaults:{
                                width:'100%',
                            },
                            items: [
                                {
                                    xtype: 'numberfieldcustom',
                                    fieldLabel: 'PO-Wert',
                                    name: 'netValue',
                                    readOnlyCls: 'x-form-readonly x-item-disabled',
                                    allowBlank: false,
                                    step: 10,
                                    cls:'numberfieldcustom numberfieldcustomtextalign',
                                    bind: {
                                        value:'{netValue}',
                                        readOnly: '{isCancelled}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    renderer: function(value, displayField) {
                                        var currency = this.lookupViewModel().get('baseCurrency');
                                        return Erp.Utils.currency(value, currency || " ");
                                    },
                                    fieldLabel: 'USt.',
                                    name: 'taxValue',
                                    cls:'displayfieldcustom numberfieldcustomtextalign',
                                    bind: {
                                        value:'{taxValue}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    renderer: function(value, displayField) {
                                        var currency = this.lookupViewModel().get('baseCurrency');
                                        return Erp.Utils.currency(value, currency || " ");
                                    },
                                    fieldLabel: 'Brutto',
                                    name: 'grossValue',
                                    cls:'displayfieldcustom numberfieldcustomtextalign',
                                    bind: {
                                        value: '{grossValue}'
                                    }
                                },
                                {
                                    xtype: 'fieldset',
                                    title: 'in Vendorwährung',
                                    bind:{
                                        hidden:'{isBaseCurrency}',
                                        disabled: '{isBaseCurrency}'
                                    },
                                    defaults:{
                                        width:'100%',
                                        flex:1,
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfieldcustom',
                                            name: 'originalNetValue',
                                            allowBlank: false,
                                            step: 10,
                                            cls:'numberfieldcustomgroup numberfieldcustomtextalign',
                                            bind: {
                                                disabled: '{isBaseCurrency}',
                                                fieldLabel: 'PO-Wert {vendor.currency}',
                                                value: '{originalNetValue}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            renderer: function(value, displayField) {
                                                var currency = this.lookupViewModel().get('vendor.currency');
                                                return Erp.Utils.currency(value, currency || " ");
                                            },
                                            fieldLabel: 'USt.',
                                            name: 'originalTaxValue',
                                            cls:'displayfieldcustomgroup',
                                            bind: {
                                                disabled: '{isBaseCurrency}',
                                                value: '{originalTaxValue}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            renderer: function(value, displayField) {
                                                var currency = this.lookupViewModel().get('vendor.currency');
                                                return Erp.Utils.currency(value, currency || " ");
                                            },
                                            fieldLabel: 'Brutto',
                                            name: 'originalGrossValue',
                                            cls:'displayfieldcustomgroup',
                                            bind: {
                                                disabled: '{isBaseCurrency}',
                                                value: '{originalGrossValue}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'fieldset',
                            flex: 1,
                            title: 'Rechnungsdaten',
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 300,
                                    fieldLabel: 'Zahlungsfrist',
                                    name: 'paymentTerm',
                                    readOnlyCls: 'x-form-readonly x-item-disabled',
                                    valueNotFoundText: 'Keine Zahlungsfrist',
                                    store: [
                                        [15,'15 Tage'],
                                        [30,'30 Tage'],
                                        [45,'45 Tage']
                                    ],
                                    bind: {
                                        readOnly: '{isCancelled}'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    fieldLabel: 'Rechn.-datum Kreditoren',
                                    name: 'billDate',
                                    readOnlyCls: 'x-form-readonly x-item-disabled',
                                    enableKeyEvents:true,
                                    bind: {
                                        value: '{billDate}',
                                        readOnly: '{isPaied}'
                                    },
                                    listeners: {
                                        change: 'onBilldateChange'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    fieldLabel: 'Rechn.-eingang Kreditoren',
                                    name: 'billReceivedDate',
                                    readOnlyCls: 'x-form-readonly x-item-disabled',
                                    enableKeyEvents:true,
                                    bind: {
                                        value: '{billReceivedDate}',
                                        readOnly: '{isPaied}'
                                    },
                                    listeners: {
                                        change: 'onBillReceiveChange',
                                        writeablechange:'onBillReceiveWriteableChange'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Rechn.-Nr. Vendor',
                                    name: 'billNumber',
                                    readOnlyCls: 'x-form-readonly x-item-disabled',
                                    bind: {
                                        readOnly: '{isCancelled}',
                                        store:'{vendor.invoicesList}'
                                    },
                                    listeners: {
                                        change: 'onBillNumberChange',
                                        writeablechange:'onBillNumberWriteableChange'
                                    }
                                    
                                },
                                {
                                    xtype: 'datefield',
                                    fieldLabel: 'Bezahlt am',
                                    name: 'paidDate',
                                    readOnlyCls: 'x-form-readonly x-item-disabled',
                                    enableKeyEvents:true,
                                    bind: {
                                        value: '{paidDate}',
                                        readOnly: '{!isPayable}'
                                    },
                                    listeners: {
                                        change:'onPaiddateChange'
                                    }
                                },
                                {
                                    xtype: 'hiddenfield',
                                    name: 'sameDatePoIds'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    name: 'bookingMonth'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    name: 'bookingYear'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    name: 'paymentBlockValue'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    anchor: '100%',
                                    fieldLabel: 'Bezahlung blockiert',
                                    name:'cbBlocked',
                                    boxLabel: 'Bezahlung blockiert',
                                    bind: {
                                        value: '{isBlocked}'
                                    },
                                    listeners: {
                                        change: 'onBlockedChange'
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    anchor: '100%',
                                    fieldLabel: 'Storno',
                                    boxLabel: 'PO stornieren',
                                    bind: {
                                        disabled: '{disableCancel}',
                                        value: '{isCancelled}'
                                    },
                                    listeners: {
                                        change: 'onStornoChange'
                                    }
                                }
                            ]
                        },{
                            xtype: 'fieldset',
                            flex: 1,
                            title: 'letzter Bearbeiter',
                            items: [
                                {
                                    xtype: 'displayfield',
                                    renderer: function(value, displayField) {
                                        return Ext.Date.format(value, Ext.Date.defaultFormat+' H:i');
                                    },
                                    fieldLabel: 'Datum letzte Bearbeitung',
                                    name: 'modifiedDate'
                                },
                                {
                                    xtype: 'displayfield',
                                    fieldLabel: 'letzter Bearbeiter',
                                    name: 'editorName'
                                }
                            ]
                        },{
                            xtype: 'fieldset',
                            flex: 1,
                            title: 'Geprüft',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    fieldLabel: 'Geprüft',
                                    name: 'checked',
                                    readOnlyCls: 'x-form-readonly x-item-disabled',
                                    bind: {
                                        readOnly: '{isCancelled}'
                                    },
                                    listeners: {
                                        change: 'onCheckedChange'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    fieldLabel: 'Geprüft von',
                                    name: 'checkerName'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    padding: 10,
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            flex: 1,
                            formBind: true,
                            itemId: 'saveButton',
                            reference: 'saveButton',
                            margin: 5,
                            text: 'Speichern'
                        },
                        {
                            xtype: 'button',
                            flex: 1,
                            itemId: 'cancelButton',
                            margin: 5,
                            text: 'Abbrechen'
                        }
                    ]
                    
                }
            ],
            };
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },
    loadRecord: function(record) {
        var me = this,
            combo = me.down('combobox[name="vendorId"]');
        combo.getStore().removeAll();
        
        me.suspendChangeEvents();
        me.callParent(arguments);
        var vm = me.getViewModel(),
            cancelled = record.get('state') == 'cancelled';
        vm.set('billDate', record.get('billDate'));
        vm.set('paidDate', record.get('paidDate'));
        vm.set('billReceivedDate', record.get('billReceivedDate'));
        vm.set('isCancelled', cancelled);
        vm.set('isBlocked', record.get('state') == 'blocked');
        vm.set('wasCancelled', cancelled);
        vm.set('vendorId',record.get('vendorId'));
        vm.set('vendorNumber',record.get('vendorNumber'));
        vm.set('vendorCurrency',record.get('vendorCurrency'));
        vm.set('taxPercent',record.get('taxPercent'));
        me.resumeChangeEvents();
		
		//FIXME this is a temporary fix,when setValue is called the binding is done,
        //otherwise only with changing the viewModel isBlocked value the binding is not done
        var cbBlocked = me.getForm().findField('cbBlocked');
        cbBlocked.setValue(record.get('state') == 'blocked');

        me.setLoading();
        //reload the vendors store
        vm.getStore('vendors').load({
            scope: this,
            params:{
                sourceLang:record.get('sourceLang'),
                targetLang: record.get('targetLang'),
                orderId:record.get('orderId')
            },
            callback: function(records, operation, success) {
                //fire a custom event, like recordloaded, and invoke in the controller to this event and call there onVendorChange
                me.getController().onVendorChange(combo, record.get('vendorNumber'));
                //focus on first empty field
                me.focusOnFirstEmptyField();

                me.setLoading(false);
            }
        }); 
        //add allowBlank dynamically to billRecivedDate and billNumber the billDate have a valid value and the billDate field is not disabled
        if(!vm.get('isPaied')){
            me.getController().handleAllowBlankBillReceivedDateBillNumber(Ext.Date.format(vm.get('billDate'),'d.m.Y'));
        }else{
            me.getController().cleanAllowBlankBillReceivedDateBillNumber();
        }
        //reset the value that holds the po's(if there is more than one) that need to be saved
        me.getController().additionalModifiedPos='';

        me.isValid();
    },
    suspendChangeEvents: function() {
        this.suspendEvent('change');
        this.getForm().getFields().each(function(){
            this.suspendEvent('change');
        });

    },
    languageRenderer:function(value,displayField){
        if(!value){
            return "";
        }
        var langStr = displayField.getName() == 'sourceLang'? Erp.data.sourceLanguages :Erp.data.targetLanguages,
            retVal ="";

        langStr.forEach(function(element) {
            if(element.value==value){
                retVal=element.text;
                return false;
            }
        });
        return retVal;
    },
    resumeChangeEvents: function() {
        this.getForm().getFields().each(function(){
            this.resumeEvent('change');
        });
        this.resumeEvent('change');
    },
    reset: function() {
        this.suspendChangeEvents();
        this.callParent(arguments);
        this.resumeChangeEvents();
    },
    //set the pointer to the first empty field
    focusOnFirstEmptyField:function(){
        Erp.Utils.focusOnFirstEmptyField(this.getForm());
    },
    savePurchaseOrder:function(){
        var me=this,
            vc=me.getController();
            vc.save();
    },
    cancelPurchaseOrder:function(){
        var me=this,
            vc=me.getController();
            vc.cancelEdit();
    }
});