<?xml version="1.0" encoding="UTF-8"?>
<!-- this file specifies properties, which configure a translate5 task. These properties override system-wide properties of the same name, if given. This file is passed along with the translate5 import package in the root of the import package and must have the name "task-template.xml". -->
<!-- root tag "task" is mandatory -->
<task>
	<!-- tag "templateId" is mandatory. It is just an identifier for this specific task-template -->
	<templateId>TaskTemplateTestCaseCSVTagProtect</templateId>
	<!-- tag "templateName" is mandatory. It is just an identifier for this specific task-template -->
	<templateName>TestCaseTemplate to enable protectTags to CSV imports</templateName>
	
	<!-- tag "import" is optional -->
	<import>
		<!-- tag "fileparser" is optional. It and its descendents specify information for the import fileparsing. Transit-fileparsing is only supported, if fileparser className is passed in task-template.xml. Multiple fileParser-tags are forbidden, but fileparser can have multiple different children specifying different fileparser classes to be used for an import of a task. -->
		<fileparser>
			<!-- tag <importClassName> is mandatory. It specifies the full class-name of the import-fileparser to use - e.g. editor_Models_Import_FileParser_Transit. The used export-fileparser will be the one corresponding to the specified importfileparser -->
			<editor_Models_Import_FileParser_Csv>
				<!-- tag "options" is optional and specifies options for the specific fileparser. If the fileparser does not support the passed options, they are simply ignored -->
				<options>
					<!-- tag "protectTags" is optional (default is 0) and must contain one of the boolean values "1" or "0". So far it is only supported by CSV fileparser -->
					<protectTags>1</protectTags>
					<!-- tag "regexes" is optional and must contain one or multiple regex-tags. So far it is only supported by CSV fileparser  -->
                    <!--<regexes>-->
						<!-- tag "regex" must contain a valid php-pcre REGEX _inside_ a CDATA-block. If the regex is not valid, the import will throw an error and continue without using the regex -->
                    <!--
						<regex><![CDATA[/\\r/]]></regex>
						<regex><![CDATA[/\\n/]]></regex>
                    </regexes>-->
				</options>
			</editor_Models_Import_FileParser_Csv>
		</fileparser>
	</import>
</task>
