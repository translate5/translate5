#compdef translate5.sh

_translate5.sh()
{
    local state com cur

    cur=${words[${#words[@]}]}

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    if [[ ${cur} == --* ]]; then
        state="option"
        opts=("--help:Display help for the given command. When no command is given display help for the <info\>list</info\> command" "--quiet:Do not output any message" "--verbose:Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug" "--version:Display this application version" "--ansi:Force \(or disable --no-ansi\) ANSI output" "--no-ansi:Negate the "--ansi" option" "--no-interaction:Do not ask any interactive question")
    elif [[ $cur == $com ]]; then
        state="command"
        coms=("_complete:Internal command to provide shell completion suggestions" "changelog:Show the last changelog entries." "completion:Dump the shell completion script" "config:List, get and set translate5 configuration values." "help:Display help for a command" "list:List commands" "log:Query the translate5 log" "status:Prints a instance status." "auth\:apptoken\:add:Generates auth token used for authentication in translate5" "auth\:impersonate:Returns a URL to authenticate password less as the given user." "cache\:purge:Cleans the application cache." "database\:update:Maintain database updates." "dev\:createtest:Development: Creates a new API test, gets the name \(ISSUE-XXX\) from the current branch." "dev\:ecode:Development: Returns the next free ecode and blocks it globally \(via our server\)" "dev\:githook:Development: Executes code checks invoked by git hooks. The checks are implemented in here." "dev\:localservices:Local Development only: Searches and sets the dockerized services matching the "docker-compose-localdev.yml" docker-compose-file" "dev\:newdbchange:Development: Creates a new DB alter file, gets the filename from the current branch." "dev\:newmodel:Development: Creates a new model php file." "dev\:okapibconfversion:Development: Increases the current revision of the git-based OKAPI bconv version by 1 and checks for SRX changes" "dev\:triggerworkflow:Development: Triggers a workflow action / notification, identified by class name and function" "l10n\:add:TODO." "l10n\:remove:TODO." "maintenance\:announce:Sends an announcement via email with the given time and message to the configured users." "maintenance\:disable:Disable the maintenance mode." "maintenance\:message:Sets just a message in the maintenance announce message box to application users." "maintenance\:notify:Sends a message directly to all connected users \(if messagebus enabled\) which opens a popup to the user then." "maintenance\:set:Sets the maintenance mode." "maintenance\:status:Returns information about the maintenance mode." "plugin\:disable:Deactivate one or more plug-ins." "plugin\:enable:Activate one or more plug-ins." "plugin\:list:List all installed plugins." "release\:notes:Updates the release notes, only usable in development installations." "segment\:history:Shows the segment editing history, from the oldest to the current version." "service\:autodiscovery:Searches for common DNS names of used services and sets them in the configuration,\
 using the default ports." "system\:check:Checks the system requirements." "system\:mailtest:Sends a test e-mail to the given address as argument." "t5memory\:migrate:Migrates all existing OpenTM2 language resources to t5memory" "task\:clean:provides information about and the possibility to delete hanging import / erroneous tasks and orphaned task data directories" "task\:info:Queries the task table and provides a listing of all found tasks, or detailed information if found only a single task." "task\:skeletonfile:List and show the content of a tasks import data skeleton file\(s\)" "termportal\:datatypecheck:Checks the integrity of the term datatypes against the content in the attributes table. This is necessary due TRANSLATE-2797." "termportal\:reindex:Re-index the fulltext index of the term database." "test\:addinisection:API-Tests: Transfers important configs to the installation.ini\'s test-section." "test\:applytestsql:API-Tests: Applies the test alter SQL files to the local DB. Needed in fresh installations where tests should be called directly, like docker environments or new development installations" "test\:apprun:API-Tests: Runs all tests for the application environment." "test\:cleanup:API-Tests: Removes all workers, unlocks all locked tasks and cleans incomplete bconf\'s to clean test residuals." "test\:createfaultysegment:API-Tests: Manipulates a segment to contain a tag-error in the edited target" "test\:run:API-Tests: Runs a single test." "test\:runall:API-Tests: Runs all." "test\:runsuite:API-Tests: Runs a test suite." "tmx\:otmfix:Helper tool to sanitize TMX files with invalid XML exported from OpenTM2 according to TRANSLATE-2835" "tmx\:ts1040:Helper tool to convert TMX files according to TS-1040" "user\:create:Creates a user via CLI." "user\:info:Returns information about one or more users in translate5." "visual\:convertlegacypdfs:Visual: Converts all PDF based reviews using the legacy scroller" "worker\:clean:Removes all done workers from the worker table" "worker\:list:Prints a list of current workers or details about one worker" "worker\:queue:Triggers the worker queue - may be necessary after an apache restart or maintenance mode.")
    fi

    case $state in
        command)
            _describe 'command' coms
        ;;
        option)
            case "$com" in

            _complete)
            opts+=("--shell:The shell type \("bash"\)" "--input:An array of input tokens \(e.g. COMP_WORDS or argv\)" "--current:The index of the "input" array that the cursor is in \(e.g. COMP_CWORD\)" "--symfony:The version of the completion script")
            ;;

            changelog)
            opts+=("--important:Show the important release notes only." "--summary:Show only a summary")
            ;;

            completion)
            opts+=("--debug:Tail the completion debug log")
            ;;

            config)
            opts+=("--detail:Show config details on listing" "--modified:Show only modified values on listing" "--empty:Set the value to an empty string \(which can not be given as set argument\)." "--comment:Add a comment for this config value")
            ;;

            help)
            opts+=("--format:The output format \(txt, xml, json, or md\)" "--raw:To output raw command help")
            ;;

            list)
            opts+=("--raw:To output raw command list" "--format:The output format \(txt, xml, json, or md\)" "--short:To skip describing commands\' arguments")
            ;;

            log)
            opts+=("--level:Filtering for specific level\(s\). If given as string, only the level given as string is shown. Given as integer: filtering for all levels as bitmask." "--follow:Show the most recent log entries, and continuously print new entries as they are appended to the log. Do not show a summary." "--all:Shows the full blown log data \(extra, trace, etc\)" "--since:Shows log data since the given point in time \(strtotime parsable string\)." "--until:Shows log data until the given point in time \(strtotime parsable string\). If the parameter starts with a "+" it is automatically added to the since date." "--last:Shows only the last X log entries \(default 5\)." "--no-summary:Do not print the summary and intro texts - for further shell scripting." "--summary-only:Print only the summary." "--purge:Warning: purges the logs found be the given filters. Is asking for confirmation of not used with -q\|--quiet or -n\|--no-interaction.")
            ;;

            status)
            opts+=()
            ;;

            auth:apptoken:add)
            opts+=()
            ;;

            auth:impersonate)
            opts+=("--segment-id:Give a segment ID to generate a URL pointing directly to that segment.")
            ;;

            cache:purge)
            opts+=()
            ;;

            database:update)
            opts+=("--import:Imports all new database files or a single file if a filename / hash was given." "--assume-imported:WARNING: Instead of importing the selected file it is just marked as imported without applying the content to the DB!")
            ;;

            dev:createtest)
            opts+=("--name:Force a name \(must end with Test!\) instead of getting it from the branch." "--plugin:Create the test in the given Plugin \(give the relative path to the plugin root!\).")
            ;;

            dev:ecode)
            opts+=()
            ;;

            dev:githook)
            opts+=()
            ;;

            dev:localservices)
            opts+=("--auto-set:Discover and update the configuration")
            ;;

            dev:newdbchange)
            opts+=("--php:Creates a PHP instead of a SQL file." "--name:Force a name instead of getting it from the branch.")
            ;;

            dev:newmodel)
            opts+=("--name:Force to enter Model name" "--table:Force to enter database table name" "--plugin:Plugin name when the current files are create in plugin contenxt.")
            ;;

            dev:okapibconfversion)
            opts+=()
            ;;

            dev:triggerworkflow)
            opts+=("--taskid:The task ID of the task to be used as current task" "--options:The action parameters / options given as JSON string as it would be stored in the LEK_workflow_action table")
            ;;

            l10n:add)
            opts+=("--path:The path to the xliff files, if omitted defaulting to the editor/locales files." "--replace:Replace the trans-unit identified by --after instead of appending to it." "--after:The source content after which the new content should be added.")
            ;;

            l10n:remove)
            opts+=("--path:The path to the xliff files, if omitted defaulting to the editor/locales files.")
            ;;

            maintenance:announce)
            opts+=("--message:Sets the message announced to the users about the maintenance.")
            ;;

            maintenance:disable)
            opts+=()
            ;;

            maintenance:message)
            opts+=()
            ;;

            maintenance:notify)
            opts+=()
            ;;

            maintenance:set)
            opts+=("--message:Sets the message shown to the users about the maintenance." "--announce:Also send an announcement about the set maintenance. See maintenance:announce for details.")
            ;;

            maintenance:status)
            opts+=()
            ;;

            plugin:disable)
            opts+=()
            ;;

            plugin:enable)
            opts+=()
            ;;

            plugin:list)
            opts+=()
            ;;

            release:notes)
            opts+=()
            ;;

            segment:history)
            opts+=("--task:Give a task ID or taskGuid here, then the argument "segment" is interpreted as segment nr in that task instead as a unique segment id.")
            ;;

            service:autodiscovery)
            opts+=("--auto-set:Discover and update the configuration" "--service:Specify the service to configure")
            ;;

            system:check)
            opts+=("--pre-installation:In installation mode only the basic environment check \(or the given module\) is called and the Zend Application is not initialized")
            ;;

            system:mailtest)
            opts+=()
            ;;

            t5memory:migrate)
            opts+=("--sourceUrl:Endpoint data is exported from, e.g. http://t5memory.local/t5memory" "--doNotWaitImportFinish:Skips waiting for import to finish before processing next language resource" "--no-doNotWaitImportFinish:Negate the "--doNotWaitImportFinish" option" "--wait-timeout:Timeout in seconds for waiting for import to finish")
            ;;

            task:clean)
            opts+=("--delete-error:deletes one \(with ID\) or all tasks with errors" "--delete-import:deletes one task in state import" "--set-to-error:sets a task to status error \(for example to gain access to clone/delete/download of a hanging import task\)" "--delete-data:deletes all orphaned data folders")
            ;;

            task:info)
            opts+=("--id-only:Force to search the identifier only in the ID column \(to prevent find tasks containing the ID in one of the other searched columns\)" "--detail:Shows all data fields of the task \(expect qmSubsegmentFlags\) and task meta instead the overview")
            ;;

            task:skeletonfile)
            opts+=("--list-files:List the available files only" "--dump-all:Dumps all files with file names as sections - output not usable as plain file after redirecting" "--dump-one:Dumps one raw file for redirecting on CLI, needs the fileid as argument")
            ;;

            termportal:datatypecheck)
            opts+=()
            ;;

            termportal:reindex)
            opts+=()
            ;;

            test:addinisection)
            opts+=()
            ;;

            test:applytestsql)
            opts+=()
            ;;

            test:apprun)
            opts+=("--recreate-database:Use this option to recreate the application database with it\'s name being prompted. This will also clean the /data directory contents." "--database-recreation:Use this option to recreate the application database with it\'s name as option. This will also clean the /data directory contents." "--xdebug:Send the XDEBUG cookie to enable interactive debugging." "--stop-on-error:Leads to the testsuite stopping on the first error \(not failure!\)." "--stop-on-failure:Leads to the testsuite stopping on the first failure \(not error!\)." "--keep-data:Prevents that the test data \(tasks, etc\) is cleaned up after the test. Useful for debugging a test. Must be implemented in the test itself, so not all tests support that flag yet.")
            ;;

            test:cleanup)
            opts+=("--application-database-cleanup:Clean the production/application database instead of the test database")
            ;;

            test:createfaultysegment)
            opts+=()
            ;;

            test:run)
            opts+=("--capture:Use this option to re-capture the test data of a test. Probably not all tests are adopted yet to support this switch." "--legacy-segment:Use this option when re-capturing segment test data to use the old order of the segment data. Comparing the changes then with git diff is easier. Then commit and re-run the test without this option, then finally commit the result. Only usable with -c" "--legacy-json:Use this option when re-capturing test data to use the old json style. Comparing the changes then with git diff is easier. Then commit and re-run the test without this option, then finally commit the result. Only usable with -c" "--recreate-database:Use this option to recreate the test database before running the test." "--xdebug:Send the XDEBUG cookie to enable interactive debugging." "--stop-on-error:Leads to the testsuite stopping on the first error \(not failure!\)." "--stop-on-failure:Leads to the testsuite stopping on the first failure \(not error!\)." "--keep-data:Prevents that the test data \(tasks, etc\) is cleaned up after the test. Useful for debugging a test. Must be implemented in the test itself, so not all tests support that flag yet." "--master-test:Leads to the testsuite running in master mode. Be aware that this might create costs for using paid external APIs.")
            ;;

            test:runall)
            opts+=("--skip-database-reset:Will skip the database-reset before running the tests." "--xdebug:Send the XDEBUG cookie to enable interactive debugging." "--stop-on-error:Leads to the testsuite stopping on the first error \(not failure!\)." "--stop-on-failure:Leads to the testsuite stopping on the first failure \(not error!\)." "--master-test:Leads to the testsuite running in master mode. Be aware that this might create costs for using paid external APIs.")
            ;;

            test:runsuite)
            opts+=("--recreate-database:Use this option to recreate the test database before running the test." "--xdebug:Send the XDEBUG cookie to enable interactive debugging." "--stop-on-error:Leads to the testsuite stopping on the first error \(not failure!\)." "--stop-on-failure:Leads to the testsuite stopping on the first failure \(not error!\)." "--master-test:Leads to the testsuite running in master mode. Be aware that this might create costs for using paid external APIs.")
            ;;

            tmx:otmfix)
            opts+=("--write:writes the output back to a new file \(same name with .cleaned.tmx suffix\) instead to stdout")
            ;;

            tmx:ts1040)
            opts+=("--analyze:Analyzes the used content tags \(ph it bpt ept\)" "--count:Counts the used XML tags." "--utf8out:returns the content in UTF8 instead the usual UTF16 which is used in TMX files" "--write:writes the output back to a new file \(same name with .cleaned.tmx suffix\) instead to stdout")
            ;;

            user:create)
            opts+=("--roles:Give one or multiple roles for the user. To get valid roles call with -R. Provide one -r per role, see example. If omitted just role editor is used." "--choose-roles:With this option you can select interactively the roles of the new user. -r is ignored then." "--locale:The initial locale to be used, defaults to "en". Alternative is just "de" at the moment.")
            ;;

            user:info)
            opts+=()
            ;;

            visual:convertlegacypdfs)
            opts+=()
            ;;

            worker:clean)
            opts+=("--all:Removes defunc workers." "--running:Removes the running workers - which makes sense if they were crashed but not set to defunct - keeps done without --all")
            ;;

            worker:list)
            opts+=("--all:List also done and defunc workers.")
            ;;

            worker:queue)
            opts+=()
            ;;

            esac

            _describe 'option' opts
        ;;
        *)
            # fallback to file completion
            _arguments '*:file:_files'
    esac
}

compdef _translate5.sh translate5.sh
