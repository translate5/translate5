_translate5.sh()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--help --quiet --verbose --version --ansi --no-ansi --no-interaction"

        case "$com" in

            _complete)
            opts="${opts} --shell --input --current --symfony"
            ;;

            changelog)
            opts="${opts} --important --summary"
            ;;

            completion)
            opts="${opts} --debug"
            ;;

            config)
            opts="${opts} --detail --modified --empty --comment"
            ;;

            help)
            opts="${opts} --format --raw"
            ;;

            list)
            opts="${opts} --raw --format --short"
            ;;

            log)
            opts="${opts} --level --follow --all --since --until --last --no-summary --summary-only --purge"
            ;;

            status)
            opts="${opts} "
            ;;

            auth:apptoken:add)
            opts="${opts} "
            ;;

            auth:impersonate)
            opts="${opts} --segment-id"
            ;;

            cache:purge)
            opts="${opts} "
            ;;

            database:update)
            opts="${opts} --import --assume-imported"
            ;;

            dev:createtest)
            opts="${opts} --name --plugin"
            ;;

            dev:ecode)
            opts="${opts} "
            ;;

            dev:githook)
            opts="${opts} "
            ;;

            dev:localservices)
            opts="${opts} --auto-set"
            ;;

            dev:newdbchange)
            opts="${opts} --php --name"
            ;;

            dev:newmodel)
            opts="${opts} --name --table --plugin"
            ;;

            dev:okapibconfversion)
            opts="${opts} "
            ;;

            dev:triggerworkflow)
            opts="${opts} --taskid --options"
            ;;

            l10n:add)
            opts="${opts} --path --replace --after"
            ;;

            l10n:remove)
            opts="${opts} --path"
            ;;

            maintenance:announce)
            opts="${opts} --message"
            ;;

            maintenance:disable)
            opts="${opts} "
            ;;

            maintenance:message)
            opts="${opts} "
            ;;

            maintenance:notify)
            opts="${opts} "
            ;;

            maintenance:set)
            opts="${opts} --message --announce"
            ;;

            maintenance:status)
            opts="${opts} "
            ;;

            plugin:disable)
            opts="${opts} "
            ;;

            plugin:enable)
            opts="${opts} "
            ;;

            plugin:list)
            opts="${opts} "
            ;;

            release:notes)
            opts="${opts} "
            ;;

            segment:history)
            opts="${opts} --task"
            ;;

            service:autodiscovery)
            opts="${opts} --auto-set --service"
            ;;

            system:check)
            opts="${opts} --pre-installation"
            ;;

            system:mailtest)
            opts="${opts} "
            ;;

            t5memory:migrate)
            opts="${opts} --sourceUrl --doNotWaitImportFinish --no-doNotWaitImportFinish --wait-timeout"
            ;;

            task:clean)
            opts="${opts} --delete-error --delete-import --set-to-error --delete-data"
            ;;

            task:info)
            opts="${opts} --id-only --detail"
            ;;

            task:skeletonfile)
            opts="${opts} --list-files --dump-all --dump-one"
            ;;

            termportal:datatypecheck)
            opts="${opts} "
            ;;

            termportal:reindex)
            opts="${opts} "
            ;;

            test:addinisection)
            opts="${opts} "
            ;;

            test:applytestsql)
            opts="${opts} "
            ;;

            test:apprun)
            opts="${opts} --recreate-database --database-recreation --xdebug --stop-on-error --stop-on-failure --keep-data"
            ;;

            test:cleanup)
            opts="${opts} --application-database-cleanup"
            ;;

            test:createfaultysegment)
            opts="${opts} "
            ;;

            test:run)
            opts="${opts} --capture --legacy-segment --legacy-json --recreate-database --xdebug --stop-on-error --stop-on-failure --keep-data --master-test"
            ;;

            test:runall)
            opts="${opts} --skip-database-reset --xdebug --stop-on-error --stop-on-failure --master-test"
            ;;

            test:runsuite)
            opts="${opts} --recreate-database --xdebug --stop-on-error --stop-on-failure --master-test"
            ;;

            tmx:otmfix)
            opts="${opts} --write"
            ;;

            tmx:ts1040)
            opts="${opts} --analyze --count --utf8out --write"
            ;;

            user:create)
            opts="${opts} --roles --choose-roles --locale"
            ;;

            user:info)
            opts="${opts} "
            ;;

            visual:convertlegacypdfs)
            opts="${opts} "
            ;;

            worker:clean)
            opts="${opts} --all --running"
            ;;

            worker:list)
            opts="${opts} --all"
            ;;

            worker:queue)
            opts="${opts} "
            ;;

        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms="_complete changelog completion config help list log status auth:apptoken:add auth:impersonate cache:purge database:update dev:createtest dev:ecode dev:githook dev:localservices dev:newdbchange dev:newmodel dev:okapibconfversion dev:triggerworkflow l10n:add l10n:remove maintenance:announce maintenance:disable maintenance:message maintenance:notify maintenance:set maintenance:status plugin:disable plugin:enable plugin:list release:notes segment:history service:autodiscovery system:check system:mailtest t5memory:migrate task:clean task:info task:skeletonfile termportal:datatypecheck termportal:reindex test:addinisection test:applytestsql test:apprun test:cleanup test:createfaultysegment test:run test:runall test:runsuite tmx:otmfix tmx:ts1040 user:create user:info visual:convertlegacypdfs worker:clean worker:list worker:queue"

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _translate5.sh translate5.sh
